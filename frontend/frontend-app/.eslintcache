[{"C:\\Users\\Aleksey\\Desktop\\main\\my_projects\\TritoneProject\\frontend\\frontend-app\\src\\index.tsx":"1","C:\\Users\\Aleksey\\Desktop\\main\\my_projects\\TritoneProject\\frontend\\frontend-app\\src\\redux\\store.ts":"2","C:\\Users\\Aleksey\\Desktop\\main\\my_projects\\TritoneProject\\frontend\\frontend-app\\src\\App.tsx":"3","C:\\Users\\Aleksey\\Desktop\\main\\my_projects\\TritoneProject\\frontend\\frontend-app\\src\\redux\\reducers\\help-reducer.ts":"4","C:\\Users\\Aleksey\\Desktop\\main\\my_projects\\TritoneProject\\frontend\\frontend-app\\src\\redux\\reducers\\appData-reducer.ts":"5","C:\\Users\\Aleksey\\Desktop\\main\\my_projects\\TritoneProject\\frontend\\frontend-app\\src\\redux\\reducers\\TestReducers\\diagramElements-reducer.ts":"6","C:\\Users\\Aleksey\\Desktop\\main\\my_projects\\TritoneProject\\frontend\\frontend-app\\src\\redux\\reducers\\edit-reducer.ts":"7","C:\\Users\\Aleksey\\Desktop\\main\\my_projects\\TritoneProject\\frontend\\frontend-app\\src\\redux\\reducers\\statistic-reducer.ts":"8","C:\\Users\\Aleksey\\Desktop\\main\\my_projects\\TritoneProject\\frontend\\frontend-app\\src\\redux\\reducers\\TestReducers\\calc-reducer.ts":"9","C:\\Users\\Aleksey\\Desktop\\main\\my_projects\\TritoneProject\\frontend\\frontend-app\\src\\redux\\reducers\\user-reducer.ts":"10","C:\\Users\\Aleksey\\Desktop\\main\\my_projects\\TritoneProject\\frontend\\frontend-app\\src\\redux\\reducers\\TestReducers\\testing-reducer.ts":"11","C:\\Users\\Aleksey\\Desktop\\main\\my_projects\\TritoneProject\\frontend\\frontend-app\\src\\redux\\reducers\\TestReducers\\test-reducer.ts":"12","C:\\Users\\Aleksey\\Desktop\\main\\my_projects\\TritoneProject\\frontend\\frontend-app\\src\\redux\\selectors\\user-selector.ts":"13","C:\\Users\\Aleksey\\Desktop\\main\\my_projects\\TritoneProject\\frontend\\frontend-app\\src\\redux\\ActionCreators\\UserActionCreators.ts":"14","C:\\Users\\Aleksey\\Desktop\\main\\my_projects\\TritoneProject\\frontend\\frontend-app\\src\\hoc\\withSuspense.tsx":"15","C:\\Users\\Aleksey\\Desktop\\main\\my_projects\\TritoneProject\\frontend\\frontend-app\\src\\components\\Header\\Header.tsx":"16","C:\\Users\\Aleksey\\Desktop\\main\\my_projects\\TritoneProject\\frontend\\frontend-app\\src\\components\\Registration\\Registration.tsx":"17","C:\\Users\\Aleksey\\Desktop\\main\\my_projects\\TritoneProject\\frontend\\frontend-app\\src\\components\\Testing\\Testing.tsx":"18","C:\\Users\\Aleksey\\Desktop\\main\\my_projects\\TritoneProject\\frontend\\frontend-app\\src\\components\\Testing\\Section3\\ViewResult.tsx":"19","C:\\Users\\Aleksey\\Desktop\\main\\my_projects\\TritoneProject\\frontend\\frontend-app\\src\\components\\Auth\\Auth.tsx":"20","C:\\Users\\Aleksey\\Desktop\\main\\my_projects\\TritoneProject\\frontend\\frontend-app\\src\\components\\Testing\\Section3\\ViewResultPoints\\PointTest.tsx":"21","C:\\Users\\Aleksey\\Desktop\\main\\my_projects\\TritoneProject\\frontend\\frontend-app\\src\\components\\Exit\\Exit.tsx":"22","C:\\Users\\Aleksey\\Desktop\\main\\my_projects\\TritoneProject\\frontend\\frontend-app\\src\\components\\EditGroup\\EditGroup.tsx":"23","C:\\Users\\Aleksey\\Desktop\\main\\my_projects\\TritoneProject\\frontend\\frontend-app\\src\\components\\StudentStatistic\\StudentStatistic.tsx":"24","C:\\Users\\Aleksey\\Desktop\\main\\my_projects\\TritoneProject\\frontend\\frontend-app\\src\\components\\Fetch\\Fetch.tsx":"25","C:\\Users\\Aleksey\\Desktop\\main\\my_projects\\TritoneProject\\frontend\\frontend-app\\src\\components\\Help\\Help.tsx":"26","C:\\Users\\Aleksey\\Desktop\\main\\my_projects\\TritoneProject\\frontend\\frontend-app\\src\\components\\Testing\\Section3\\ViewResultPoints\\ViewResultPoints.tsx":"27","C:\\Users\\Aleksey\\Desktop\\main\\my_projects\\TritoneProject\\frontend\\frontend-app\\src\\components\\Testing\\Section2\\Test.tsx":"28","C:\\Users\\Aleksey\\Desktop\\main\\my_projects\\TritoneProject\\frontend\\frontend-app\\src\\components\\EditTest\\EditTest.tsx":"29","C:\\Users\\Aleksey\\Desktop\\main\\my_projects\\TritoneProject\\frontend\\frontend-app\\src\\components\\Testing\\Section1\\DiagramConstructor\\DiagramConstructor.jsx":"30","C:\\Users\\Aleksey\\Desktop\\main\\my_projects\\TritoneProject\\frontend\\frontend-app\\src\\functions\\PointTestFunctions.ts":"31","C:\\Users\\Aleksey\\Desktop\\main\\my_projects\\TritoneProject\\frontend\\frontend-app\\src\\types\\generalTypes.ts":"32","C:\\Users\\Aleksey\\Desktop\\main\\my_projects\\TritoneProject\\frontend\\frontend-app\\src\\functions\\Random.ts":"33","C:\\Users\\Aleksey\\Desktop\\main\\my_projects\\TritoneProject\\frontend\\frontend-app\\src\\redux\\selectors\\appData-selector.ts":"34","C:\\Users\\Aleksey\\Desktop\\main\\my_projects\\TritoneProject\\frontend\\frontend-app\\src\\redux\\selectors\\calc-selector.ts":"35","C:\\Users\\Aleksey\\Desktop\\main\\my_projects\\TritoneProject\\frontend\\frontend-app\\src\\redux\\selectors\\testing-selector.ts":"36","C:\\Users\\Aleksey\\Desktop\\main\\my_projects\\TritoneProject\\frontend\\frontend-app\\src\\redux\\ActionCreators\\CalcActionsCreators.ts":"37","C:\\Users\\Aleksey\\Desktop\\main\\my_projects\\TritoneProject\\frontend\\frontend-app\\src\\redux\\selectors\\edit-selectors.ts":"38","C:\\Users\\Aleksey\\Desktop\\main\\my_projects\\TritoneProject\\frontend\\frontend-app\\src\\redux\\selectors\\test-selectors.ts":"39","C:\\Users\\Aleksey\\Desktop\\main\\my_projects\\TritoneProject\\frontend\\frontend-app\\src\\redux\\selectors\\help-selector.ts":"40","C:\\Users\\Aleksey\\Desktop\\main\\my_projects\\TritoneProject\\frontend\\frontend-app\\src\\redux\\selectors\\statistic-selector.ts":"41","C:\\Users\\Aleksey\\Desktop\\main\\my_projects\\TritoneProject\\frontend\\frontend-app\\src\\redux\\ThunkCreators\\userThunks.ts":"42","C:\\Users\\Aleksey\\Desktop\\main\\my_projects\\TritoneProject\\frontend\\frontend-app\\src\\redux\\ThunkCreators\\editThunks.ts":"43","C:\\Users\\Aleksey\\Desktop\\main\\my_projects\\TritoneProject\\frontend\\frontend-app\\src\\redux\\ThunkCreators\\statisticThunks.ts":"44","C:\\Users\\Aleksey\\Desktop\\main\\my_projects\\TritoneProject\\frontend\\frontend-app\\src\\redux\\ThunkCreators\\testingThunks.ts":"45","C:\\Users\\Aleksey\\Desktop\\main\\my_projects\\TritoneProject\\frontend\\frontend-app\\src\\components\\Header\\DropMenu.tsx":"46","C:\\Users\\Aleksey\\Desktop\\main\\my_projects\\TritoneProject\\frontend\\frontend-app\\src\\components\\Testing\\Section.tsx":"47","C:\\Users\\Aleksey\\Desktop\\main\\my_projects\\TritoneProject\\frontend\\frontend-app\\src\\components\\EditTest\\QuestionEditor.tsx":"48","C:\\Users\\Aleksey\\Desktop\\main\\my_projects\\TritoneProject\\frontend\\frontend-app\\src\\components\\Testing\\Section2\\TestResult.tsx":"49","C:\\Users\\Aleksey\\Desktop\\main\\my_projects\\TritoneProject\\frontend\\frontend-app\\src\\components\\StudentStatistic\\StatisticTable.tsx":"50","C:\\Users\\Aleksey\\Desktop\\main\\my_projects\\TritoneProject\\frontend\\frontend-app\\src\\components\\EditGroup\\GroupEditor.tsx":"51","C:\\Users\\Aleksey\\Desktop\\main\\my_projects\\TritoneProject\\frontend\\frontend-app\\src\\components\\Testing\\Section3\\CustomComponents\\CustomBarChar.tsx":"52","C:\\Users\\Aleksey\\Desktop\\main\\my_projects\\TritoneProject\\frontend\\frontend-app\\src\\components\\Testing\\Section3\\CustomComponents\\SuccessPointDialog.tsx":"53","C:\\Users\\Aleksey\\Desktop\\main\\my_projects\\TritoneProject\\frontend\\frontend-app\\src\\components\\Testing\\Section3\\CustomComponents\\PanelControl.tsx":"54","C:\\Users\\Aleksey\\Desktop\\main\\my_projects\\TritoneProject\\frontend\\frontend-app\\src\\components\\Testing\\Section3\\ViewResultTypes\\PointTypesSelection.tsx":"55","C:\\Users\\Aleksey\\Desktop\\main\\my_projects\\TritoneProject\\frontend\\frontend-app\\src\\components\\Testing\\Section3\\ViewResultChoseColumns\\ChoseColumns.tsx":"56","C:\\Users\\Aleksey\\Desktop\\main\\my_projects\\TritoneProject\\frontend\\frontend-app\\src\\redux\\selectors\\diagram-selector.ts":"57","C:\\Users\\Aleksey\\Desktop\\main\\my_projects\\TritoneProject\\frontend\\frontend-app\\src\\components\\Testing\\Section3\\ViewResultTableCalc\\TableCalc.tsx":"58","C:\\Users\\Aleksey\\Desktop\\main\\my_projects\\TritoneProject\\frontend\\frontend-app\\src\\components\\Testing\\Section2\\CustomComponents\\Question.tsx":"59","C:\\Users\\Aleksey\\Desktop\\main\\my_projects\\TritoneProject\\frontend\\frontend-app\\src\\components\\Help\\HelpArticleList\\ArticleList.tsx":"60","C:\\Users\\Aleksey\\Desktop\\main\\my_projects\\TritoneProject\\frontend\\frontend-app\\src\\components\\Help\\HelpArticles\\GeneralArticle.tsx":"61","C:\\Users\\Aleksey\\Desktop\\main\\my_projects\\TritoneProject\\frontend\\frontend-app\\src\\components\\Testing\\Section1\\DiagramConstructor\\DiagramComponentsAndFunctions\\HelpFunctions.ts":"62","C:\\Users\\Aleksey\\Desktop\\main\\my_projects\\TritoneProject\\frontend\\frontend-app\\src\\components\\Testing\\Section1\\DiagramConstructor\\DiagramComponentsAndFunctions\\DiagramField.tsx":"63","C:\\Users\\Aleksey\\Desktop\\main\\my_projects\\TritoneProject\\frontend\\frontend-app\\src\\components\\Help\\HelpArticles\\EquipmentArticle.jsx":"64","C:\\Users\\Aleksey\\Desktop\\main\\my_projects\\TritoneProject\\frontend\\frontend-app\\src\\components\\Testing\\Section1\\DiagramConstructor\\ElementsList\\ElementsList.tsx":"65","C:\\Users\\Aleksey\\Desktop\\main\\my_projects\\TritoneProject\\frontend\\frontend-app\\src\\components\\Testing\\Section1\\DiagramConstructor\\DiagramComponentsAndFunctions\\SplitDiagramField.jsx":"66","C:\\Users\\Aleksey\\Desktop\\main\\my_projects\\TritoneProject\\frontend\\frontend-app\\src\\redux\\ActionCreators\\StatisticActionCreators.ts":"67","C:\\Users\\Aleksey\\Desktop\\main\\my_projects\\TritoneProject\\frontend\\frontend-app\\src\\redux\\ActionCreators\\EditActionCreators.ts":"68","C:\\Users\\Aleksey\\Desktop\\main\\my_projects\\TritoneProject\\frontend\\frontend-app\\src\\redux\\ActionCreators\\DiagramActionCreators.ts":"69","C:\\Users\\Aleksey\\Desktop\\main\\my_projects\\TritoneProject\\frontend\\frontend-app\\src\\redux\\ActionCreators\\TestActionCreators.ts":"70","C:\\Users\\Aleksey\\Desktop\\main\\my_projects\\TritoneProject\\frontend\\frontend-app\\src\\types\\apiTypes.ts":"71","C:\\Users\\Aleksey\\Desktop\\main\\my_projects\\TritoneProject\\frontend\\frontend-app\\src\\redux\\ActionCreators\\TestingActionCreators.ts":"72","C:\\Users\\Aleksey\\Desktop\\main\\my_projects\\TritoneProject\\frontend\\frontend-app\\src\\api\\userApi.ts":"73","C:\\Users\\Aleksey\\Desktop\\main\\my_projects\\TritoneProject\\frontend\\frontend-app\\src\\api\\editApi.ts":"74","C:\\Users\\Aleksey\\Desktop\\main\\my_projects\\TritoneProject\\frontend\\frontend-app\\src\\api\\statisticApi.ts":"75","C:\\Users\\Aleksey\\Desktop\\main\\my_projects\\TritoneProject\\frontend\\frontend-app\\src\\api\\testingApi.ts":"76","C:\\Users\\Aleksey\\Desktop\\main\\my_projects\\TritoneProject\\frontend\\frontend-app\\src\\functions\\TestFunctions.ts":"77","C:\\Users\\Aleksey\\Desktop\\main\\my_projects\\TritoneProject\\frontend\\frontend-app\\src\\redux\\ActionCreators\\HelpActionCreators.ts":"78","C:\\Users\\Aleksey\\Desktop\\main\\my_projects\\TritoneProject\\frontend\\frontend-app\\src\\components\\Testing\\Section3\\CustomComponents\\MistakeDialog.tsx":"79","C:\\Users\\Aleksey\\Desktop\\main\\my_projects\\TritoneProject\\frontend\\frontend-app\\src\\components\\Testing\\Section3\\ViewResultPoints\\ChosenTypes.tsx":"80","C:\\Users\\Aleksey\\Desktop\\main\\my_projects\\TritoneProject\\frontend\\frontend-app\\src\\components\\Testing\\Section3\\CustomComponents\\SuccessDialog.tsx":"81","C:\\Users\\Aleksey\\Desktop\\main\\my_projects\\TritoneProject\\frontend\\frontend-app\\src\\components\\Testing\\Section2\\CustomComponents\\GreenRadio.tsx":"82","C:\\Users\\Aleksey\\Desktop\\main\\my_projects\\TritoneProject\\frontend\\frontend-app\\src\\components\\Testing\\Section3\\CustomComponents\\MaterialSelect.tsx":"83","C:\\Users\\Aleksey\\Desktop\\main\\my_projects\\TritoneProject\\frontend\\frontend-app\\src\\components\\Testing\\Section3\\CustomComponents\\MaterialTable.tsx":"84","C:\\Users\\Aleksey\\Desktop\\main\\my_projects\\TritoneProject\\frontend\\frontend-app\\src\\components\\Testing\\Section3\\CustomComponents\\CustomTooltip.jsx":"85","C:\\Users\\Aleksey\\Desktop\\main\\my_projects\\TritoneProject\\frontend\\frontend-app\\src\\components\\Testing\\Section1\\DiagramConstructor\\DiagramComponentsAndFunctions\\Field.jsx":"86","C:\\Users\\Aleksey\\Desktop\\main\\my_projects\\TritoneProject\\frontend\\frontend-app\\src\\components\\Testing\\Section1\\DiagramConstructor\\DiagramComponentsAndFunctions\\ConnectionLine.jsx":"87","C:\\Users\\Aleksey\\Desktop\\main\\my_projects\\TritoneProject\\frontend\\frontend-app\\src\\components\\Testing\\Section1\\DiagramConstructor\\DiagramComponentsAndFunctions\\Edge.jsx":"88","C:\\Users\\Aleksey\\Desktop\\main\\my_projects\\TritoneProject\\frontend\\frontend-app\\src\\components\\Testing\\Section1\\DiagramConstructor\\DiagramComponentsAndFunctions\\NodeComponent.jsx":"89","C:\\Users\\Aleksey\\Desktop\\main\\my_projects\\TritoneProject\\frontend\\frontend-app\\src\\components\\Main\\Main.tsx":"90"},{"size":417,"mtime":1624524858589,"results":"91","hashOfConfig":"92"},{"size":1343,"mtime":1624598826116,"results":"93","hashOfConfig":"92"},{"size":4141,"mtime":1624529073182,"results":"94","hashOfConfig":"92"},{"size":576,"mtime":1624524858612,"results":"95","hashOfConfig":"92"},{"size":5716,"mtime":1624524858610,"results":"96","hashOfConfig":"92"},{"size":4143,"mtime":1624524858607,"results":"97","hashOfConfig":"92"},{"size":801,"mtime":1624524858610,"results":"98","hashOfConfig":"92"},{"size":714,"mtime":1624524858613,"results":"99","hashOfConfig":"92"},{"size":11021,"mtime":1624524858605,"results":"100","hashOfConfig":"92"},{"size":3586,"mtime":1624526579312,"results":"101","hashOfConfig":"92"},{"size":882,"mtime":1624524858609,"results":"102","hashOfConfig":"92"},{"size":1152,"mtime":1624524858608,"results":"103","hashOfConfig":"92"},{"size":1222,"mtime":1624526651604,"results":"104","hashOfConfig":"92"},{"size":1259,"mtime":1624526546136,"results":"105","hashOfConfig":"92"},{"size":349,"mtime":1624528126120,"results":"106","hashOfConfig":"92"},{"size":1541,"mtime":1624524858516,"results":"107","hashOfConfig":"92"},{"size":8741,"mtime":1624524858531,"results":"108","hashOfConfig":"92"},{"size":1647,"mtime":1624524858582,"results":"109","hashOfConfig":"92"},{"size":3221,"mtime":1624524858568,"results":"110","hashOfConfig":"92"},{"size":3332,"mtime":1624528542410,"results":"111","hashOfConfig":"92"},{"size":3936,"mtime":1624524858574,"results":"112","hashOfConfig":"92"},{"size":550,"mtime":1624524858512,"results":"113","hashOfConfig":"92"},{"size":1409,"mtime":1624524858506,"results":"114","hashOfConfig":"92"},{"size":4605,"mtime":1624524858534,"results":"115","hashOfConfig":"92"},{"size":479,"mtime":1624527846833,"results":"116","hashOfConfig":"92"},{"size":1321,"mtime":1624524858518,"results":"117","hashOfConfig":"92"},{"size":1707,"mtime":1624524858576,"results":"118","hashOfConfig":"92"},{"size":2791,"mtime":1624524858555,"results":"119","hashOfConfig":"92"},{"size":2711,"mtime":1624524858510,"results":"120","hashOfConfig":"92"},{"size":4973,"mtime":1624524858546,"results":"121","hashOfConfig":"92"},{"size":8516,"mtime":1624524858584,"results":"122","hashOfConfig":"92"},{"size":2963,"mtime":1624524858628,"results":"123","hashOfConfig":"92"},{"size":143,"mtime":1624524858585,"results":"124","hashOfConfig":"92"},{"size":298,"mtime":1624524858616,"results":"125","hashOfConfig":"92"},{"size":2669,"mtime":1624524858616,"results":"126","hashOfConfig":"92"},{"size":189,"mtime":1624524858622,"results":"127","hashOfConfig":"92"},{"size":1813,"mtime":1624524858592,"results":"128","hashOfConfig":"92"},{"size":269,"mtime":1624524858618,"results":"129","hashOfConfig":"92"},{"size":869,"mtime":1624524858621,"results":"130","hashOfConfig":"92"},{"size":137,"mtime":1624524858620,"results":"131","hashOfConfig":"92"},{"size":180,"mtime":1624524858620,"results":"132","hashOfConfig":"92"},{"size":2603,"mtime":1624526875699,"results":"133","hashOfConfig":"92"},{"size":3219,"mtime":1624524858600,"results":"134","hashOfConfig":"92"},{"size":707,"mtime":1624524858601,"results":"135","hashOfConfig":"92"},{"size":5743,"mtime":1624524858602,"results":"136","hashOfConfig":"92"},{"size":6491,"mtime":1624524858514,"results":"137","hashOfConfig":"92"},{"size":1988,"mtime":1624524858537,"results":"138","hashOfConfig":"92"},{"size":5470,"mtime":1624524858511,"results":"139","hashOfConfig":"92"},{"size":2891,"mtime":1624524858557,"results":"140","hashOfConfig":"92"},{"size":936,"mtime":1624524858532,"results":"141","hashOfConfig":"92"},{"size":3246,"mtime":1624524858508,"results":"142","hashOfConfig":"92"},{"size":1087,"mtime":1624529110037,"results":"143","hashOfConfig":"92"},{"size":2432,"mtime":1624524858566,"results":"144","hashOfConfig":"92"},{"size":4504,"mtime":1624524858564,"results":"145","hashOfConfig":"92"},{"size":4547,"mtime":1624524858579,"results":"146","hashOfConfig":"92"},{"size":5541,"mtime":1624524858571,"results":"147","hashOfConfig":"92"},{"size":586,"mtime":1624524858618,"results":"148","hashOfConfig":"92"},{"size":3512,"mtime":1624524858578,"results":"149","hashOfConfig":"92"},{"size":2556,"mtime":1624524858554,"results":"150","hashOfConfig":"92"},{"size":878,"mtime":1624524858521,"results":"151","hashOfConfig":"92"},{"size":4135,"mtime":1624524858526,"results":"152","hashOfConfig":"92"},{"size":1777,"mtime":1624524858543,"results":"153","hashOfConfig":"92"},{"size":1617,"mtime":1624524858540,"results":"154","hashOfConfig":"92"},{"size":8558,"mtime":1624524858524,"results":"155","hashOfConfig":"92"},{"size":1858,"mtime":1624524858551,"results":"156","hashOfConfig":"92"},{"size":1707,"mtime":1624524858545,"results":"157","hashOfConfig":"92"},{"size":242,"mtime":1624524858596,"results":"158","hashOfConfig":"92"},{"size":468,"mtime":1624524858594,"results":"159","hashOfConfig":"92"},{"size":1179,"mtime":1624524858593,"results":"160","hashOfConfig":"92"},{"size":398,"mtime":1624524858597,"results":"161","hashOfConfig":"92"},{"size":1316,"mtime":1624524858628,"results":"162","hashOfConfig":"92"},{"size":372,"mtime":1624524858597,"results":"163","hashOfConfig":"92"},{"size":1429,"mtime":1624524858406,"results":"164","hashOfConfig":"92"},{"size":2764,"mtime":1624524858403,"results":"165","hashOfConfig":"92"},{"size":604,"mtime":1624524858404,"results":"166","hashOfConfig":"92"},{"size":4602,"mtime":1624524858404,"results":"167","hashOfConfig":"92"},{"size":354,"mtime":1624524858586,"results":"168","hashOfConfig":"92"},{"size":165,"mtime":1624524858595,"results":"169","hashOfConfig":"92"},{"size":2065,"mtime":1624524858563,"results":"170","hashOfConfig":"92"},{"size":1346,"mtime":1624524858573,"results":"171","hashOfConfig":"92"},{"size":2234,"mtime":1624524858565,"results":"172","hashOfConfig":"92"},{"size":455,"mtime":1624524858553,"results":"173","hashOfConfig":"92"},{"size":743,"mtime":1624524858561,"results":"174","hashOfConfig":"92"},{"size":903,"mtime":1624524858562,"results":"175","hashOfConfig":"92"},{"size":1082,"mtime":1624524858560,"results":"176","hashOfConfig":"92"},{"size":4579,"mtime":1624524858543,"results":"177","hashOfConfig":"92"},{"size":565,"mtime":1624524858539,"results":"178","hashOfConfig":"92"},{"size":698,"mtime":1624524858542,"results":"179","hashOfConfig":"92"},{"size":969,"mtime":1624524858544,"results":"180","hashOfConfig":"92"},{"size":1165,"mtime":1624524858528,"results":"181","hashOfConfig":"92"},{"filePath":"182","messages":"183","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"184"},"1u0gpgy",{"filePath":"185","messages":"186","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"184"},{"filePath":"187","messages":"188","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"184"},{"filePath":"189","messages":"190","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"184"},{"filePath":"191","messages":"192","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"184"},{"filePath":"193","messages":"194","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"184"},{"filePath":"195","messages":"196","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"184"},{"filePath":"197","messages":"198","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"184"},{"filePath":"199","messages":"200","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"184"},{"filePath":"201","messages":"202","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"184"},{"filePath":"203","messages":"204","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"184"},{"filePath":"205","messages":"206","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"184"},{"filePath":"207","messages":"208","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"184"},{"filePath":"209","messages":"210","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"184"},{"filePath":"211","messages":"212","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"184"},{"filePath":"213","messages":"214","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"184"},{"filePath":"215","messages":"216","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"184"},{"filePath":"217","messages":"218","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"219","usedDeprecatedRules":"184"},{"filePath":"220","messages":"221","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"222","usedDeprecatedRules":"184"},{"filePath":"223","messages":"224","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"225","usedDeprecatedRules":"184"},{"filePath":"226","messages":"227","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"228","usedDeprecatedRules":"184"},{"filePath":"229","messages":"230","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"231","usedDeprecatedRules":"184"},{"filePath":"232","messages":"233","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"234","usedDeprecatedRules":"184"},{"filePath":"235","messages":"236","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"237","usedDeprecatedRules":"184"},{"filePath":"238","messages":"239","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"184"},{"filePath":"240","messages":"241","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"184"},{"filePath":"242","messages":"243","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"244","usedDeprecatedRules":"184"},{"filePath":"245","messages":"246","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"184"},{"filePath":"247","messages":"248","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"249","usedDeprecatedRules":"184"},{"filePath":"250","messages":"251","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"252"},{"filePath":"253","messages":"254","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"184"},{"filePath":"255","messages":"256","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"184"},{"filePath":"257","messages":"258","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"184"},{"filePath":"259","messages":"260","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"184"},{"filePath":"261","messages":"262","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"184"},{"filePath":"263","messages":"264","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"184"},{"filePath":"265","messages":"266","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"184"},{"filePath":"267","messages":"268","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"184"},{"filePath":"269","messages":"270","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"184"},{"filePath":"271","messages":"272","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"184"},{"filePath":"273","messages":"274","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"184"},{"filePath":"275","messages":"276","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"184"},{"filePath":"277","messages":"278","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"184"},{"filePath":"279","messages":"280","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"184"},{"filePath":"281","messages":"282","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"184"},{"filePath":"283","messages":"284","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"184"},{"filePath":"285","messages":"286","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"184"},{"filePath":"287","messages":"288","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"289","usedDeprecatedRules":"184"},{"filePath":"290","messages":"291","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"292","usedDeprecatedRules":"184"},{"filePath":"293","messages":"294","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"184"},{"filePath":"295","messages":"296","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"184"},{"filePath":"297","messages":"298","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"184"},{"filePath":"299","messages":"300","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"301","usedDeprecatedRules":"184"},{"filePath":"302","messages":"303","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"184"},{"filePath":"304","messages":"305","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"306","usedDeprecatedRules":"184"},{"filePath":"307","messages":"308","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"184"},{"filePath":"309","messages":"310","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"184"},{"filePath":"311","messages":"312","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":2,"source":"313","usedDeprecatedRules":"184"},{"filePath":"314","messages":"315","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"316","usedDeprecatedRules":"184"},{"filePath":"317","messages":"318","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"184"},{"filePath":"319","messages":"320","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"184"},{"filePath":"321","messages":"322","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"184"},{"filePath":"323","messages":"324","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"184"},{"filePath":"325","messages":"326","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"252"},{"filePath":"327","messages":"328","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"184"},{"filePath":"329","messages":"330","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"252"},{"filePath":"331","messages":"332","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"184"},{"filePath":"333","messages":"334","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"184"},{"filePath":"335","messages":"336","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"184"},{"filePath":"337","messages":"338","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"184"},{"filePath":"339","messages":"340","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"184"},{"filePath":"341","messages":"342","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"184"},{"filePath":"343","messages":"344","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"184"},{"filePath":"345","messages":"346","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"184"},{"filePath":"347","messages":"348","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"184"},{"filePath":"349","messages":"350","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"184"},{"filePath":"351","messages":"352","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"184"},{"filePath":"353","messages":"354","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"184"},{"filePath":"355","messages":"356","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"357","usedDeprecatedRules":"184"},{"filePath":"358","messages":"359","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"184"},{"filePath":"360","messages":"361","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"362","usedDeprecatedRules":"184"},{"filePath":"363","messages":"364","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"184"},{"filePath":"365","messages":"366","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"184"},{"filePath":"367","messages":"368","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"184"},{"filePath":"369","messages":"370","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"252"},{"filePath":"371","messages":"372","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"373","usedDeprecatedRules":"252"},{"filePath":"374","messages":"375","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"252"},{"filePath":"376","messages":"377","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"252"},{"filePath":"378","messages":"379","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"380"},{"filePath":"381","messages":"382","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"184"},"C:\\Users\\Aleksey\\Desktop\\main\\my_projects\\TritoneProject\\frontend\\frontend-app\\src\\index.tsx",[],["383","384"],"C:\\Users\\Aleksey\\Desktop\\main\\my_projects\\TritoneProject\\frontend\\frontend-app\\src\\redux\\store.ts",[],"C:\\Users\\Aleksey\\Desktop\\main\\my_projects\\TritoneProject\\frontend\\frontend-app\\src\\App.tsx",[],"C:\\Users\\Aleksey\\Desktop\\main\\my_projects\\TritoneProject\\frontend\\frontend-app\\src\\redux\\reducers\\help-reducer.ts",[],"C:\\Users\\Aleksey\\Desktop\\main\\my_projects\\TritoneProject\\frontend\\frontend-app\\src\\redux\\reducers\\appData-reducer.ts",[],"C:\\Users\\Aleksey\\Desktop\\main\\my_projects\\TritoneProject\\frontend\\frontend-app\\src\\redux\\reducers\\TestReducers\\diagramElements-reducer.ts",[],"C:\\Users\\Aleksey\\Desktop\\main\\my_projects\\TritoneProject\\frontend\\frontend-app\\src\\redux\\reducers\\edit-reducer.ts",[],"C:\\Users\\Aleksey\\Desktop\\main\\my_projects\\TritoneProject\\frontend\\frontend-app\\src\\redux\\reducers\\statistic-reducer.ts",[],"C:\\Users\\Aleksey\\Desktop\\main\\my_projects\\TritoneProject\\frontend\\frontend-app\\src\\redux\\reducers\\TestReducers\\calc-reducer.ts",[],"C:\\Users\\Aleksey\\Desktop\\main\\my_projects\\TritoneProject\\frontend\\frontend-app\\src\\redux\\reducers\\user-reducer.ts",[],"C:\\Users\\Aleksey\\Desktop\\main\\my_projects\\TritoneProject\\frontend\\frontend-app\\src\\redux\\reducers\\TestReducers\\testing-reducer.ts",[],"C:\\Users\\Aleksey\\Desktop\\main\\my_projects\\TritoneProject\\frontend\\frontend-app\\src\\redux\\reducers\\TestReducers\\test-reducer.ts",[],"C:\\Users\\Aleksey\\Desktop\\main\\my_projects\\TritoneProject\\frontend\\frontend-app\\src\\redux\\selectors\\user-selector.ts",[],"C:\\Users\\Aleksey\\Desktop\\main\\my_projects\\TritoneProject\\frontend\\frontend-app\\src\\redux\\ActionCreators\\UserActionCreators.ts",[],"C:\\Users\\Aleksey\\Desktop\\main\\my_projects\\TritoneProject\\frontend\\frontend-app\\src\\hoc\\withSuspense.tsx",[],"C:\\Users\\Aleksey\\Desktop\\main\\my_projects\\TritoneProject\\frontend\\frontend-app\\src\\components\\Header\\Header.tsx",[],"C:\\Users\\Aleksey\\Desktop\\main\\my_projects\\TritoneProject\\frontend\\frontend-app\\src\\components\\Registration\\Registration.tsx",[],"C:\\Users\\Aleksey\\Desktop\\main\\my_projects\\TritoneProject\\frontend\\frontend-app\\src\\components\\Testing\\Testing.tsx",["385"],"import React, {useEffect, useState} from 'react';\r\nimport Section from './Section';\r\nimport styles from './Testing.module.css'\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {GetSectionsData} from \"../../redux/selectors/appData-selector\";\r\nimport {GetSections} from \"../../redux/selectors/testing-selector\";\r\nimport {GetSectionsProgress} from \"../../redux/ThunkCreators/testingThunks\";\r\n\r\nconst Testing = () => {\r\n    const sectionData = useSelector(GetSectionsData);\r\n    const sectionProgress: Array<boolean> | null = useSelector(GetSections);\r\n    const [unlockedSections, SetUnlockedSections] = useState<Array<boolean>>([false,false,false]);\r\n    const dispatch = useDispatch();\r\n\r\n    useEffect(()=>{\r\n        dispatch(GetSectionsProgress());\r\n    },[])\r\n\r\n    useEffect(()=>{\r\n        if(sectionProgress){\r\n            let newUnlockedSections = [...sectionProgress];\r\n            for(let i=0;i<newUnlockedSections.length;i++){\r\n                if(!newUnlockedSections[i]){\r\n                    newUnlockedSections[i] = true;\r\n                    break;\r\n                }\r\n            }\r\n            SetUnlockedSections(newUnlockedSections);\r\n        }\r\n    },[sectionProgress])\r\n\r\n    return (\r\n        <div className={styles.container}>\r\n            {\r\n                sectionProgress && sectionData\r\n                    ? <>\r\n                        {sectionData.map((el,index) => <Section unlockedSection={unlockedSections[index]} {...el}/>)}\r\n                    </>\r\n                    : <p>Загрузка прогресса обучения...</p>\r\n            }\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Testing;","C:\\Users\\Aleksey\\Desktop\\main\\my_projects\\TritoneProject\\frontend\\frontend-app\\src\\components\\Testing\\Section3\\ViewResult.tsx",["386","387"],"import React, {useEffect, useState} from \"react\";\r\nimport style from \"./ViewResult.module.css\"\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {GetDataSet} from \"../../../redux/ThunkCreators/testingThunks\";\r\nimport {signalKeys, signalTypes} from \"../../../types/generalTypes\";\r\nimport PanelControl from \"./CustomComponents/PanelControl\";\r\nimport MyBarChar from \"./CustomComponents/CustomBarChar\";\r\nimport {useParams} from \"react-router-dom\";\r\nimport {GetCurrentPointInfo, GetDataSetSelector} from \"../../../redux/selectors/calc-selector\";\r\nimport {ChangeSignalLevel} from \"../../../redux/ActionCreators/CalcActionsCreators\";\r\nimport {\r\n    GetMeasureTypeByIdRussian,\r\n    GetPointNameTranslation\r\n} from \"../../../functions/PointTestFunctions\";\r\n\r\nconst initialCheckBoxState = {\r\n    signalLevelMax: false,\r\n    signalLevel: true,\r\n    signalLevelMin: false\r\n};\r\n\r\ntype useParamsType = {\r\n    pointId: string,\r\n    typeId: string\r\n}\r\n\r\nconst ViewResult = () => {\r\n    let {pointId, typeId} = useParams<useParamsType>()\r\n    const currentPointInfo = useSelector(GetCurrentPointInfo(parseInt(pointId)));\r\n    const dataSet = useSelector(GetDataSetSelector);\r\n    const [currentSignalLevel, setCurrentSignalLevel] = useState(signalKeys.signalLevel);\r\n    const [checkBoxState, setCheckBoxState] = useState(initialCheckBoxState);\r\n\r\n    const myDispatch = useDispatch();\r\n\r\n\r\n    useEffect(()=>{\r\n        if(currentPointInfo){\r\n            let typeName: string = \"\";\r\n            switch(parseInt(typeId)){\r\n                case signalTypes.Test:\r\n                    typeName=\"Test\";\r\n                    break;\r\n                case signalTypes.Signal:{\r\n                    typeName=\"Signal\";\r\n                    break;\r\n                }\r\n                case signalTypes.Back:{\r\n                    typeName=\"Back\";\r\n                    break;\r\n                }\r\n                case signalTypes.SAZ:{\r\n                    typeName=\"SAZ\";\r\n                    break;\r\n                }\r\n            }\r\n\r\n            /Floor|Wall|Ceiling/.test(currentPointInfo.pointName)\r\n                ? myDispatch(GetDataSet(\"FWC\"+typeName))\r\n                : myDispatch(GetDataSet(currentPointInfo.pointName+typeName));\r\n        }\r\n\r\n    },[myDispatch, currentPointInfo])\r\n\r\n    useEffect(()=>{\r\n        const intervalId = setInterval(() => {\r\n            myDispatch(ChangeSignalLevel());\r\n        }, 1500);\r\n\r\n        return () => clearInterval(intervalId);\r\n    },[myDispatch])\r\n\r\n    return(\r\n        <div className={style.viewer_container}>\r\n            <div className={style.viewer_title}>\r\n                <p>{GetMeasureTypeByIdRussian(parseInt(typeId))}</p>\r\n                <p>Тип конструкции: {currentPointInfo?.pointTitle}</p>\r\n            </div>\r\n            <div className={style.viewer_field}>\r\n                <PanelControl\r\n                    checkBoxState = {checkBoxState}\r\n                    setCheckBoxState = {setCheckBoxState}\r\n                    setCurrentSignalLevel = {setCurrentSignalLevel}\r\n                />\r\n                <MyBarChar dataSet={dataSet} currentSignalLevel={currentSignalLevel}/>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ViewResult;","C:\\Users\\Aleksey\\Desktop\\main\\my_projects\\TritoneProject\\frontend\\frontend-app\\src\\components\\Auth\\Auth.tsx",["388","389","390","391"],"import React from \"react\";\r\nimport {Form, Formik, FormikValues, useField} from 'formik'\r\nimport * as Yup from 'yup'\r\nimport style from \"./Auth.module.css\"\r\nimport {NavLink, Redirect} from \"react-router-dom\";\r\nimport {LogInUser} from \"../../redux/ThunkCreators/userThunks\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {GetAuthError, GetUserAccessToken, GetUserInfo, selectIsFetching} from \"../../redux/selectors/user-selector\";\r\nimport Fetch from \"../Fetch/Fetch\";\r\n\r\ntype PropsType = {\r\n    setUserInfo: React.Dispatch<React.SetStateAction<any>>\r\n}\r\n\r\ntype ValuesType = {\r\n    login: string;\r\n    password: string;\r\n}\r\n\r\ntype CustomTextInputPropsType = {\r\n    name: string,\r\n    type: string,\r\n    label: string,\r\n    validate?: (value: any) => undefined | string | Promise<any>\r\n}\r\n\r\nconst Auth = () => {\r\n    const authError = useSelector(GetAuthError);\r\n    const isFetching = useSelector(selectIsFetching);\r\n    const dispatch = useDispatch();\r\n\r\n    const initValues: ValuesType = {\r\n        login: '',\r\n        password: ''\r\n    };\r\n\r\n    const authValidateSchema = Yup.object({\r\n        login: Yup.string().required('Обязательное поле'),\r\n        password: Yup.string().required('Обязательное поле')\r\n    });\r\n\r\n    const submit = async (values: FormikValues, actions: any) => {\r\n        await dispatch(LogInUser(values.login, values.password));\r\n        actions.setSubmitting(true);\r\n    }\r\n\r\n    return (\r\n        isFetching\r\n            ? <Fetch/>\r\n            : <Formik\r\n                initialValues={initValues}\r\n                validationSchema={authValidateSchema}\r\n                onSubmit={submit}\r\n            >\r\n                {() => (\r\n                    <div className={style.formContainer}>\r\n                        <Form className={style.form}>\r\n                            <p className=\"font_usual-center\">АВТОРИЗАЦИЯ</p>\r\n                            <AuthTextInput name=\"login\" type=\"text\" label=\"Логин\"/>\r\n                            <AuthTextInput name=\"password\" type=\"password\" label=\"Пароль\"/>\r\n                            {authError && <p style={{\r\n                                fontSize: \"0.9rem\",\r\n                                backgroundColor: \"#ff8f8f\",\r\n                                padding: \"0.5vh\",\r\n                                borderRadius: \"15px\"\r\n                            }}>{authError}</p>}\r\n                            <button className=\"button_classic\" type=\"submit\">Войти</button>\r\n                            <NavLink to={\"/reg\"}>Нет учетной записи?</NavLink>\r\n                        </Form>\r\n                    </div>\r\n                )}\r\n            </Formik>\r\n    )\r\n}\r\n\r\nconst AuthTextInput = (props: CustomTextInputPropsType) => {\r\n    const [field, meta] = useField(props);\r\n\r\n    return (\r\n        <div className={style.inputGroup}>\r\n            <input className={style.inputGroup__input} {...field} {...props}/>\r\n            <label className={style.inputGroup__label} htmlFor={props.name}>{props.label}</label>\r\n            <span\r\n                className={meta.touched && meta.error ? style.inputGroup__errorVisible : style.inputGroup__errorHidden}\r\n            >\r\n                {meta.error}\r\n            </span>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Auth;","C:\\Users\\Aleksey\\Desktop\\main\\my_projects\\TritoneProject\\frontend\\frontend-app\\src\\components\\Testing\\Section3\\ViewResultPoints\\PointTest.tsx",["392","393"],"import React, {useEffect, useState} from \"react\";\r\nimport {useParams} from \"react-router-dom\";\r\nimport style from \"./ViewResultPoints.module.css\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {ClearDataSet} from \"../../../../redux/ActionCreators/CalcActionsCreators\";\r\nimport {GetCurrentPointInfo, GetPointProgress} from \"../../../../redux/selectors/calc-selector\";\r\nimport PointTypesSelection from \"../ViewResultTypes/PointTypesSelection\";\r\nimport ChoseColumns from \"../ViewResultChoseColumns/ChoseColumns\";\r\nimport TableCalc from \"../ViewResultTableCalc/TableCalc\";\r\nimport SuccessPointDialog from \"../CustomComponents/SuccessPointDialog\";\r\n\r\ntype useParamsType = {\r\n    pointId: string\r\n}\r\n\r\ntype CurrentStepType = {\r\n    id: number,\r\n    stepTitle: string,\r\n    isAcoustic?: boolean,\r\n    measureSequence?: Array<number>\r\n    frequency?: Array<number>,\r\n    testValues?: Array<number>,\r\n    signalValues?: Array<number>,\r\n    backValues?: Array<number>,\r\n    delta?: Array<number>,\r\n    isolationValues?: Array<number>,\r\n    isComplete?: boolean,\r\n    rightAcousticSequence?: Array<number>,\r\n    rightVibroSequence?: Array<number>,\r\n} | null\r\n\r\nconst GetStepContent = (stepNumber: number, props: any = null) => {\r\n    if(stepNumber > 0 && stepNumber < 5) {\r\n        switch (stepNumber) {\r\n            case 1:\r\n                return <PointTypesSelection stepNumber={stepNumber}/>\r\n            case 2:\r\n                return <PointTypesSelection stepNumber={stepNumber}/>\r\n            case 3:\r\n                return <ChoseColumns stepNumber={stepNumber}/>\r\n            case 4:\r\n                return <TableCalc stepNumber={stepNumber}/>\r\n        }\r\n    } else {\r\n        return <SuccessPointDialog/> // TODO: Сделать красиво\r\n    }\r\n}\r\n\r\nconst PointTest = () => {\r\n    let {pointId} = useParams<useParamsType>();\r\n    const currentPointInfo = useSelector(GetCurrentPointInfo(parseInt(pointId))); // инфа о констрцкии и о выполнении замеров на ней TODO:УБРАТЬ ЕГО\r\n    const pointProgress = useSelector(GetPointProgress); //инфа о прохождении измерении и расчетов на конструкции\r\n    const [currentStep, setCurrentStep] = useState<CurrentStepType>(null); //инфа о текущем этапе\r\n    const dispatch = useDispatch();\r\n\r\n    //очищаем наборы данных измерений\r\n    useEffect(()=>{\r\n        dispatch(ClearDataSet());\r\n    },[])\r\n\r\n    //изменение текущего шага в локальном стейте\r\n    useEffect(()=>{\r\n        if(pointProgress){\r\n            if(pointProgress.currentStep > 0 && pointProgress.currentStep < 5){\r\n                switch (pointProgress.currentStep){\r\n                    case 1:\r\n                        setCurrentStep(pointProgress.step1);\r\n                        break;\r\n                    case 2:\r\n                        setCurrentStep(pointProgress.step2);\r\n                        break;\r\n                    case 3:\r\n                        setCurrentStep(pointProgress.step3);\r\n                        break;\r\n                    case 4:\r\n                        setCurrentStep(pointProgress.step4);\r\n                        break;\r\n                }\r\n            }\r\n            else{\r\n                pointProgress.isComplete = true;\r\n            }\r\n        }\r\n    },[pointProgress.currentStep])\r\n\r\n    return (\r\n        <div className={style.container}>\r\n            <div className={style.title}>\r\n                <p>{`${currentStep?.stepTitle} ${currentStep?.isAcoustic !== undefined ? currentStep.isAcoustic ? \"звукоизоляции\" : \"виброизоляции\" : \"\"}`}</p>\r\n                <p>Тип конструкции: {currentPointInfo?.pointTitle}.</p>\r\n            </div>\r\n            {GetStepContent(pointProgress.currentStep)}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default PointTest;","C:\\Users\\Aleksey\\Desktop\\main\\my_projects\\TritoneProject\\frontend\\frontend-app\\src\\components\\Exit\\Exit.tsx",["394"],"import React, {useEffect} from \"react\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {LogOut} from \"../../redux/ActionCreators/UserActionCreators\";\r\nimport {GetUserInfo} from \"../../redux/selectors/user-selector\";\r\nimport {Redirect} from \"react-router-dom\";\r\n\r\nconst Exit = () => {\r\n    const dispatch = useDispatch()\r\n    const userInfo = useSelector(GetUserInfo);\r\n\r\n    useEffect(()=>{\r\n        dispatch(LogOut());\r\n    },[])\r\n\r\n    return (\r\n        !userInfo ? <Redirect to={\"/auth\"}/> : <></>\r\n    )\r\n}\r\n\r\nexport default Exit;","C:\\Users\\Aleksey\\Desktop\\main\\my_projects\\TritoneProject\\frontend\\frontend-app\\src\\components\\EditGroup\\EditGroup.tsx",["395"],"import React, {useEffect} from 'react';\r\nimport style from \"./../EditTest/EditTest.module.css\"\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {GetGroups} from \"../../redux/ThunkCreators/editThunks\";\r\nimport {SelectGroups} from \"../../redux/selectors/edit-selectors\";\r\nimport GroupEditor from \"./GroupEditor\";\r\n\r\nconst EditTest = () => {\r\n    const groups = useSelector(SelectGroups);\r\n    const dispatch = useDispatch();\r\n\r\n    useEffect(() => {\r\n        dispatch(GetGroups());\r\n    }, [])\r\n\r\n    return (\r\n        <div className={style.container}>\r\n            <p>Редактирование групп</p>\r\n            <div className={style.contentGroups}>\r\n                {groups\r\n                    ? <>\r\n                        {groups.map(el => <GroupEditor\r\n                            groupId={el.groupId}\r\n                            groupName={el.groupName}\r\n                            isNew={false}\r\n                        />)\r\n                        }\r\n                        <GroupEditor\r\n                            groupId={(Math.max(...groups.map(el => el.groupId)) + 1)}\r\n                            groupName={\"\"}\r\n                            isNew={true}\r\n                        />\r\n                    </>\r\n                    : <p>Загрузка данных...</p>\r\n                }\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default EditTest;\r\n","C:\\Users\\Aleksey\\Desktop\\main\\my_projects\\TritoneProject\\frontend\\frontend-app\\src\\components\\StudentStatistic\\StudentStatistic.tsx",["396","397"],"import React, {useEffect, useMemo} from \"react\";\r\nimport style from \"./StudentStatistic.module.css\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {GetStatisticData} from \"../../redux/selectors/statistic-selector\";\r\nimport {GetStatistic} from \"../../redux/ThunkCreators/statisticThunks\";\r\nimport StatisticTable from \"./StatisticTable\";\r\nimport {GridColumns, GridRowData, GridRowsProp} from \"@material-ui/data-grid\";\r\n\r\nconst StudentStatistic = () => {\r\n    const statisticData = useSelector(GetStatisticData);\r\n    const tableColumns: GridColumns = useMemo(() => {\r\n        const result: GridColumns = [{\r\n            field: \"surname\",\r\n            headerName: \"Фамилия\",\r\n            description: \"Фамилиля студента\",\r\n            editable: false,\r\n            type: \"string\",\r\n            width: 130\r\n        },{\r\n            field: \"name\",\r\n            headerName: \"Имя\",\r\n            description: \"Имя студента\",\r\n            editable: false,\r\n            type: \"string\",\r\n            width: 120\r\n        },{\r\n            field: \"patronymic\",\r\n            headerName: \"Отчество\",\r\n            description: \"Отчество студента\",\r\n            editable: false,\r\n            type: \"string\",\r\n            width: 150\r\n        },{\r\n            field: \"groupName\",\r\n            headerName: \"Группа\",\r\n            description: \"Группа студента\",\r\n            editable: false,\r\n            type: \"string\",\r\n            width: 120\r\n        },{\r\n            field: \"section1\",\r\n            headerName: \"Раздел №1\",\r\n            description: \"Пройден/не пройден\",\r\n            editable: false,\r\n            type: \"string\",\r\n            width: 140\r\n        },{\r\n            field: \"section2\",\r\n            headerName: \"Раздел №2\",\r\n            description: \"Пройден/не пройден\",\r\n            editable: false,\r\n            type: \"string\",\r\n            width: 140\r\n        },{\r\n            field: \"section3\",\r\n            headerName: \"Раздел №3\",\r\n            description: \"Пройден/не пройден\",\r\n            editable: false,\r\n            type: \"string\",\r\n            width: 140\r\n        },{\r\n            field: \"dateStart\",\r\n            headerName: \"Дата начала обучения\",\r\n            description: \"Дата начала обучения\",\r\n            editable: false,\r\n            type: \"string\",\r\n            width: 180\r\n        },{\r\n            field: \"dateEnd\",\r\n            headerName: \"Дата окончания обучения\",\r\n            description: \"Дата окончания обучения\",\r\n            editable: false,\r\n            type: \"string\",\r\n            width: 200\r\n        }]\r\n\r\n        return result\r\n    }, [statisticData]);\r\n    const tableRows: GridRowsProp = useMemo(() => {\r\n        let result: GridRowsProp = [];\r\n        let id = 1;\r\n\r\n        if(statisticData){\r\n            statisticData.forEach(el => {\r\n                let dateStart: string[] = el.timeStart?.toString().slice(0,10).split(\"-\");\r\n                let dateEnd: string[] = el.timeEnd?.toString().slice(0,10).split(\"-\");\r\n\r\n                let Row: GridRowData = {\r\n                    id:id,\r\n                    \"surname\": el.surname,\r\n                    \"name\": el.name,\r\n                    \"patronymic\": el.patronymic,\r\n                    \"groupName\": el.groupName,\r\n                    \"section1\": el.sections[0] ? \"Пройден\" : \"Не пройден\",\r\n                    \"section2\": el.sections[1] ? \"Пройден\" : \"Не пройден\",\r\n                    \"section3\": el.sections[2] ? \"Пройден\" : \"Не пройден\",\r\n                    \"dateStart\": el.timeStart ? `${dateStart[2]}.${dateStart[1]}.${dateStart[0]}` : \"Не приступил(-а) к работе\",\r\n                    \"dateEnd\": el.timeEnd ? `${dateEnd[2]}.${dateEnd[1]}.${dateEnd[0]}` : \"Не закончил(-а) работу\"\r\n                }\r\n                result = [...result, {...Row}];\r\n                id += 1;\r\n            })\r\n        }\r\n\r\n        return result\r\n    }, [statisticData]);\r\n    const dispatch = useDispatch();\r\n\r\n    useEffect(()=>{\r\n        dispatch(GetStatistic());\r\n    },[])\r\n\r\n    return(<div className={style.container}>\r\n        <div className={style.table}>\r\n            <p>Результаты обучения студентов</p>\r\n            <StatisticTable tableColumns={tableColumns} tableRows={tableRows}/>\r\n        </div>\r\n\r\n    </div>)\r\n}\r\n\r\nexport default StudentStatistic;","C:\\Users\\Aleksey\\Desktop\\main\\my_projects\\TritoneProject\\frontend\\frontend-app\\src\\components\\Fetch\\Fetch.tsx",[],"C:\\Users\\Aleksey\\Desktop\\main\\my_projects\\TritoneProject\\frontend\\frontend-app\\src\\components\\Help\\Help.tsx",[],"C:\\Users\\Aleksey\\Desktop\\main\\my_projects\\TritoneProject\\frontend\\frontend-app\\src\\components\\Testing\\Section3\\ViewResultPoints\\ViewResultPoints.tsx",["398"],"import React, {useEffect} from \"react\";\r\nimport {NavLink} from \"react-router-dom\";\r\nimport style from \"./ViewResultPoints.module.css\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {ResetProgress, ResetSignalValuesToStep4} from \"../../../../redux/ActionCreators/CalcActionsCreators\";\r\nimport {GetPointsInfo} from \"../../../../redux/selectors/calc-selector\";\r\nimport {GetSummaryPointsProgress} from \"../../../../redux/ThunkCreators/testingThunks\";\r\n\r\nconst ViewResultPoints = () => {\r\n    const pointsInfo = useSelector(GetPointsInfo);\r\n    const dispatch = useDispatch();\r\n\r\n    useEffect(() => {\r\n        dispatch(GetSummaryPointsProgress());\r\n        dispatch(ResetProgress());\r\n        dispatch(ResetSignalValuesToStep4());\r\n        sessionStorage.getItem(\"currentMeasureSequence\") && sessionStorage.removeItem(\"currentMeasureSequence\");\r\n    }, [])\r\n\r\n    return (\r\n        <div className={style.container}>\r\n            <div className={style.title}>\r\n                <h1>ПРОВЕДЕНИЕ ИЗМЕРЕНИЙ</h1>\r\n                <p>Выберете конструкцию для измерений</p>\r\n            </div>\r\n            <div className={style.grid}>\r\n                {pointsInfo?.map(el => <div className={style.grid_elem}>\r\n                    <NavLink\r\n                        to={`/testing/viewPoints/Point/${el.id}`}\r\n                        className={`${el.isComplete?style.grid_elem_complete : style.grid_elem_notComplete}`}\r\n                    >\r\n                        {el.pointTitle.toUpperCase()}\r\n                    </NavLink>\r\n                </div>)\r\n                }\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ViewResultPoints;","C:\\Users\\Aleksey\\Desktop\\main\\my_projects\\TritoneProject\\frontend\\frontend-app\\src\\components\\Testing\\Section2\\Test.tsx",[],"C:\\Users\\Aleksey\\Desktop\\main\\my_projects\\TritoneProject\\frontend\\frontend-app\\src\\components\\EditTest\\EditTest.tsx",["399"],"import React, {useEffect} from 'react';\r\nimport style from \"./EditTest.module.css\"\r\nimport QuestionEditor from \"./QuestionEditor\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {GetTest} from \"../../redux/ThunkCreators/editThunks\";\r\nimport {SelectTest} from \"../../redux/selectors/edit-selectors\";\r\n\r\nconst EditTest = () => {\r\n    const test = useSelector(SelectTest);\r\n    const dispatch = useDispatch();\r\n\r\n    useEffect(() => {\r\n        dispatch(GetTest());\r\n    }, [])\r\n\r\n\r\n    return (\r\n        <div className={style.container}>\r\n            <p>Редактирование теста</p>\r\n            <div className={style.content}>\r\n                {test\r\n                    ? <>\r\n                        {test.questions.map(el => {\r\n                                let answers = [{\r\n                                    answerText: el.answers[0].answerText,\r\n                                    answerRight: el.answers[0].answerRight!,\r\n                                },{\r\n                                    answerText: el.answers[1].answerText,\r\n                                    answerRight: el.answers[1].answerRight!,\r\n                                },{\r\n                                    answerText: el.answers[2].answerText,\r\n                                    answerRight: el.answers[2].answerRight!,\r\n                                }];\r\n                                return <QuestionEditor\r\n                                    questionId={el.questionId.toString()}\r\n                                    questionText={el.questionText}\r\n                                    answers={[...answers]}\r\n                                    isNew={false}\r\n                                />\r\n                            }\r\n                        )\r\n                        }\r\n                        <QuestionEditor\r\n                            questionId={(Math.max(...test.questions.map(el => el.questionId)) + 1).toString()}\r\n                            questionText={\"\"}\r\n                            answers={[{\r\n                                answerText: \"\",\r\n                                answerRight: false,\r\n                            },{\r\n                                answerText: \"\",\r\n                                answerRight: false,\r\n                            },{\r\n                                answerText: \"\",\r\n                                answerRight: false,\r\n                            }]}\r\n                            isNew={true}\r\n                        />\r\n                    </>\r\n                    : <p>Загрузка данных...</p>\r\n                }\r\n\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default EditTest;\r\n","C:\\Users\\Aleksey\\Desktop\\main\\my_projects\\TritoneProject\\frontend\\frontend-app\\src\\components\\Testing\\Section1\\DiagramConstructor\\DiagramConstructor.jsx",[],["400","401"],"C:\\Users\\Aleksey\\Desktop\\main\\my_projects\\TritoneProject\\frontend\\frontend-app\\src\\functions\\PointTestFunctions.ts",[],"C:\\Users\\Aleksey\\Desktop\\main\\my_projects\\TritoneProject\\frontend\\frontend-app\\src\\types\\generalTypes.ts",[],"C:\\Users\\Aleksey\\Desktop\\main\\my_projects\\TritoneProject\\frontend\\frontend-app\\src\\functions\\Random.ts",[],"C:\\Users\\Aleksey\\Desktop\\main\\my_projects\\TritoneProject\\frontend\\frontend-app\\src\\redux\\selectors\\appData-selector.ts",[],"C:\\Users\\Aleksey\\Desktop\\main\\my_projects\\TritoneProject\\frontend\\frontend-app\\src\\redux\\selectors\\calc-selector.ts",[],"C:\\Users\\Aleksey\\Desktop\\main\\my_projects\\TritoneProject\\frontend\\frontend-app\\src\\redux\\selectors\\testing-selector.ts",[],"C:\\Users\\Aleksey\\Desktop\\main\\my_projects\\TritoneProject\\frontend\\frontend-app\\src\\redux\\ActionCreators\\CalcActionsCreators.ts",[],"C:\\Users\\Aleksey\\Desktop\\main\\my_projects\\TritoneProject\\frontend\\frontend-app\\src\\redux\\selectors\\edit-selectors.ts",[],"C:\\Users\\Aleksey\\Desktop\\main\\my_projects\\TritoneProject\\frontend\\frontend-app\\src\\redux\\selectors\\test-selectors.ts",[],"C:\\Users\\Aleksey\\Desktop\\main\\my_projects\\TritoneProject\\frontend\\frontend-app\\src\\redux\\selectors\\help-selector.ts",[],"C:\\Users\\Aleksey\\Desktop\\main\\my_projects\\TritoneProject\\frontend\\frontend-app\\src\\redux\\selectors\\statistic-selector.ts",[],"C:\\Users\\Aleksey\\Desktop\\main\\my_projects\\TritoneProject\\frontend\\frontend-app\\src\\redux\\ThunkCreators\\userThunks.ts",[],"C:\\Users\\Aleksey\\Desktop\\main\\my_projects\\TritoneProject\\frontend\\frontend-app\\src\\redux\\ThunkCreators\\editThunks.ts",[],"C:\\Users\\Aleksey\\Desktop\\main\\my_projects\\TritoneProject\\frontend\\frontend-app\\src\\redux\\ThunkCreators\\statisticThunks.ts",[],"C:\\Users\\Aleksey\\Desktop\\main\\my_projects\\TritoneProject\\frontend\\frontend-app\\src\\redux\\ThunkCreators\\testingThunks.ts",[],"C:\\Users\\Aleksey\\Desktop\\main\\my_projects\\TritoneProject\\frontend\\frontend-app\\src\\components\\Header\\DropMenu.tsx",[],"C:\\Users\\Aleksey\\Desktop\\main\\my_projects\\TritoneProject\\frontend\\frontend-app\\src\\components\\Testing\\Section.tsx",[],"C:\\Users\\Aleksey\\Desktop\\main\\my_projects\\TritoneProject\\frontend\\frontend-app\\src\\components\\EditTest\\QuestionEditor.tsx",["402","403"],"import React, {useState} from 'react';\r\nimport style from \"./EditTest.module.css\"\r\nimport {EditQuestion, QuizAnswer, QuizType} from \"../../types/generalTypes\";\r\nimport {Form, Formik, FormikValues, useField} from \"formik\";\r\nimport CreateTwoToneIcon from '@material-ui/icons/CreateTwoTone';\r\nimport CancelTwoToneIcon from '@material-ui/icons/CancelTwoTone';\r\nimport CheckTwoToneIcon from '@material-ui/icons/CheckTwoTone';\r\nimport {useDispatch} from \"react-redux\";\r\nimport {deleteQuestion, editQuestion} from \"../../redux/ThunkCreators/editThunks\";\r\n\r\ntype PropsType = {\r\n    questionId: string,\r\n    questionText: string,\r\n    answers: Array<{\r\n        answerText: string,\r\n        answerRight: boolean\r\n    }>\r\n    isNew: boolean\r\n}\r\n\r\ntype QuestionFromikValuesType = {\r\n    questionId: string,\r\n    questionText: string,\r\n    answer1: string,\r\n    answer1Right: boolean,\r\n    answer2: string,\r\n    answer2Right: boolean\r\n    answer3: string\r\n    answer3Right: boolean\r\n}\r\n\r\ntype CustomTextInputPropsType = {\r\n    name: string,\r\n    type?: string,\r\n    label: string,\r\n    validate?: (value: any) => undefined | string | Promise<any>\r\n}\r\n\r\nconst QuestionEditor: React.FC<PropsType> = (props) => {\r\n    const [isEdit, SetIsEdit] = useState(false);\r\n    const dispatch = useDispatch();\r\n\r\n    const initValues: QuestionFromikValuesType = {\r\n        questionId: props.questionId,\r\n        questionText: props.questionText,\r\n        answer1: props.answers[0].answerText,\r\n        answer1Right:props.answers[0].answerRight,\r\n        answer2: props.answers[1].answerText,\r\n        answer2Right:props.answers[1].answerRight,\r\n        answer3: props.answers[2].answerText,\r\n        answer3Right:props.answers[2].answerRight,\r\n    };\r\n\r\n    const submit = async (values: FormikValues, actions: any) => {\r\n        let answers: QuizAnswer[] = [{\r\n            answerText: values.answer1,\r\n            answerRight: values.answer1Right,\r\n        },{\r\n            answerText: values.answer2,\r\n            answerRight: values.answer2Right,\r\n        },{\r\n            answerText: values.answer3,\r\n            answerRight: values.answer3Right,\r\n        }];\r\n\r\n\r\n        let editQuestionData: EditQuestion = {\r\n            questionId: parseInt(values.questionId),\r\n            questionText: values.questionText,\r\n            answers\r\n        }\r\n\r\n        dispatch(editQuestion(editQuestionData));\r\n        SetIsEdit(isEdit=>!isEdit);\r\n    }\r\n\r\n    const deleteClick = () => {\r\n        dispatch(deleteQuestion(parseInt(props.questionId)));\r\n    }\r\n\r\n    return (\r\n        <Formik\r\n            initialValues={initValues}\r\n            onSubmit={submit}\r\n        >\r\n            {() => (\r\n                <div className={style.question}>\r\n                    <div className={style.question_title}>\r\n                        <p>{props.questionText}</p>\r\n                        <button className={style.editButton} onClick={() => SetIsEdit(isEdit => !isEdit)}>\r\n                            <CreateTwoToneIcon style={{color: \"#21a421\"}} fontSize=\"small\"/>\r\n                        </button>\r\n                        {!props.isNew\r\n                        && <button className={style.deleteButton} onClick={deleteClick}>\r\n                            <CancelTwoToneIcon style={{color: \"#a42121\"}} fontSize=\"small\"/>\r\n                        </button>\r\n                        }\r\n\r\n                    </div>\r\n                    <Form className={`${style.editBlock} ${isEdit && style.expandedEditBlock}`}>\r\n                        <TextInput name=\"questionText\" type=\"text\" label=\"Текст вопроса\"/>\r\n                        <TextInput name=\"answer1\" type=\"text\" label=\"Текст ответа №1\"/>\r\n                        <TextInput name=\"answer2\" type=\"text\" label=\"Текст ответа №2\"/>\r\n                        <TextInput name=\"answer3\" type=\"text\" label=\"Текст ответа №3\"/>\r\n                        <CheckBoxInput name=\"answer1Right\" label=\"Правильный ответ №1\"/>\r\n                        <CheckBoxInput name=\"answer2Right\" label=\"Правильный ответ №2\"/>\r\n                        <CheckBoxInput name=\"answer3Right\" label=\"Правильный ответ №3\"/>\r\n                        <button type=\"submit\">\r\n                            <CheckTwoToneIcon style={{color: \"#21a421\"}} fontSize=\"small\"/>\r\n                        </button>\r\n                    </Form>\r\n\r\n                </div>\r\n            )}\r\n        </Formik>\r\n    );\r\n};\r\n\r\nconst TextInput = (props: CustomTextInputPropsType) => {\r\n    const [field, meta] = useField(props);\r\n\r\n    return (\r\n        <div className={style.inputGroup}>\r\n            <input className={style.inputGroup__input} {...field} {...props}/>\r\n            <label className={style.inputGroup__label} htmlFor={props.name}>{props.label}</label>\r\n            <span\r\n                className={meta.touched && meta.error ? style.inputGroup__errorVisible : style.inputGroup__errorHidden}\r\n            >\r\n                {meta.error}\r\n            </span>\r\n        </div>\r\n    )\r\n}\r\n\r\nconst CheckBoxInput = (props: CustomTextInputPropsType) => {\r\n    const [field, meta] = useField(props);\r\n\r\n    return (\r\n        <div className={style.checkboxGroup}>\r\n            <label>{props.label}</label>\r\n            <input type={\"checkbox\"} checked={field.value} {...field} {...props}/>\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\nexport default QuestionEditor;\r\n\r\nexport type {\r\n    QuestionFromikValuesType\r\n}\r\n","C:\\Users\\Aleksey\\Desktop\\main\\my_projects\\TritoneProject\\frontend\\frontend-app\\src\\components\\Testing\\Section2\\TestResult.tsx",["404","405"],"import React, {useEffect} from \"react\";\r\nimport style from \"./Test.module.css\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {GetQuizResultData} from \"../../../redux/selectors/test-selectors\";\r\nimport {QuizSelectedAnswers} from \"../../../types/generalTypes\";\r\nimport {GetQuizResult, SetSectionComplete} from \"../../../redux/ThunkCreators/testingThunks\";\r\nimport {SetSectionCompleteAction} from \"../../../redux/ActionCreators/TestingActionCreators\";\r\nimport {ExpandVariable} from \"../../../functions/TestFunctions\";\r\n\r\ntype PropsType = {\r\n    selectedAnswers: Array<QuizSelectedAnswers>,\r\n    SetIsFinish: React.Dispatch<React.SetStateAction<boolean>>,\r\n    SetIsFailed: React.Dispatch<React.SetStateAction<boolean>>\r\n}\r\n\r\nconst TestResult: React.FC<PropsType> = (props) => {\r\n    const testResult = useSelector(GetQuizResultData);\r\n    const dispatch = useDispatch();\r\n\r\n    useEffect(() => {\r\n        dispatch(GetQuizResult(props.selectedAnswers))\r\n    }, [])\r\n\r\n    const finishButtonHandler = () => {\r\n        if (testResult) {\r\n            if (testResult && testResult.percentageOfResult > 80) {\r\n                props.SetIsFinish(true);\r\n                dispatch(SetSectionCompleteAction(2));\r\n            } else {\r\n                props.SetIsFailed(true);\r\n            }\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div className={style.testResultContainer}>\r\n            {\r\n                testResult\r\n                    ? <>\r\n                    <p>{testResult.percentageOfResult > 80 ? \"Тест пройден\" : \"Тест не пройден\"}</p>\r\n                    <p>Процент правильных ответов: {testResult.percentageOfResult}%</p>\r\n                    {\r\n                        testResult.quizResult.map((el) => {\r\n                            let expandVariable = ExpandVariable(el.answerText);\r\n\r\n                            return <div className={style.testAnswerInResult}>\r\n                                <p>{el.questionId + 1}</p>\r\n                                <p className={el.isRight ? style.answerRight : style.answerFailed}>{<>{\r\n                                    expandVariable ? <>\r\n                                            {expandVariable[0]}\r\n                                            <sub>{expandVariable[1]}</sub>\r\n                                        </>\r\n                                        : <>{el.answerText}</>\r\n                                }</>}</p>\r\n                            </div>\r\n                        })\r\n                        }\r\n                        <button className=\"button_classic\" onClick={finishButtonHandler}>Ок</button>\r\n                        </>\r\n                        : <p>Загрузка результатов тестирования...</p>\r\n                    }\r\n                    </div>\r\n                )\r\n            }\r\n\r\nexport default TestResult;","C:\\Users\\Aleksey\\Desktop\\main\\my_projects\\TritoneProject\\frontend\\frontend-app\\src\\components\\StudentStatistic\\StatisticTable.tsx",[],"C:\\Users\\Aleksey\\Desktop\\main\\my_projects\\TritoneProject\\frontend\\frontend-app\\src\\components\\EditGroup\\GroupEditor.tsx",[],"C:\\Users\\Aleksey\\Desktop\\main\\my_projects\\TritoneProject\\frontend\\frontend-app\\src\\components\\Testing\\Section3\\CustomComponents\\CustomBarChar.tsx",[],"C:\\Users\\Aleksey\\Desktop\\main\\my_projects\\TritoneProject\\frontend\\frontend-app\\src\\components\\Testing\\Section3\\CustomComponents\\SuccessPointDialog.tsx",["406","407"],"import React from 'react';\r\nimport Dialog from '@material-ui/core/Dialog';\r\nimport DialogActions from '@material-ui/core/DialogActions';\r\nimport Slide from '@material-ui/core/Slide';\r\nimport { TransitionProps } from '@material-ui/core/transitions';\r\nimport {useDispatch} from \"react-redux\";\r\nimport {SetNextStep, SetStepComplete} from \"../../../../redux/ActionCreators/CalcActionsCreators\";\r\nimport style from \"../ViewResult.module.css\"\r\nimport CheckCircleTwoToneIcon from '@material-ui/icons/CheckCircleTwoTone';\r\nimport {useHistory, useParams} from \"react-router-dom\";\r\nimport {SavePointProgress} from \"../../../../redux/ThunkCreators/testingThunks\";\r\n\r\nconst Transition = React.forwardRef(function Transition(\r\n    props: TransitionProps & { children?: React.ReactElement<any, any> },\r\n    ref: React.Ref<unknown>,\r\n) {\r\n    return <Slide direction=\"up\" ref={ref} {...props} />;\r\n});\r\n\r\ntype useParamsType = {\r\n    pointId: string,\r\n}\r\n\r\nconst SuccessPointDialog = () => {\r\n    const [open, setOpen] = React.useState(true);\r\n    const history = useHistory();\r\n    let {pointId} = useParams<useParamsType>();\r\n\r\n    const dispatch = useDispatch();\r\n\r\n    const OnFinishButtonHandler = async () => {\r\n        await dispatch(SavePointProgress(parseInt(pointId)));\r\n        setOpen(false);\r\n        history.push(\"/testing/viewPoints\");\r\n    };\r\n\r\n    return (\r\n        <div>\r\n            <Dialog\r\n                open={open}\r\n                TransitionComponent={Transition}\r\n                keepMounted\r\n                className={style.dialog}\r\n                style={{ color: \"#e8ffe8\"}}\r\n            >\r\n                <h2>\r\n                    <CheckCircleTwoToneIcon style={{ color: \"#8ed78e\"}} fontSize=\"default\"/>\r\n                    {\"Замеры и расчеты на данной конструции завершены успешно!\"}\r\n                </h2>\r\n                <p>\r\n                    Для того чтобы выбрать другую конструкцию, нажмите на конпку \"К выбору конструкции\".\r\n                </p>\r\n                <DialogActions>\r\n                    <button onClick={OnFinishButtonHandler} className=\"button_classic\">\r\n                        К выбору конструкции\r\n                    </button>\r\n                </DialogActions>\r\n            </Dialog>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default SuccessPointDialog;\r\n","C:\\Users\\Aleksey\\Desktop\\main\\my_projects\\TritoneProject\\frontend\\frontend-app\\src\\components\\Testing\\Section3\\CustomComponents\\PanelControl.tsx",[],"C:\\Users\\Aleksey\\Desktop\\main\\my_projects\\TritoneProject\\frontend\\frontend-app\\src\\components\\Testing\\Section3\\ViewResultTypes\\PointTypesSelection.tsx",["408","409","410","411","412","413"],"import React, {useCallback, useEffect, useState} from \"react\";\r\nimport style from \"../ViewResultPoints/ViewResultPoints.module.css\";\r\nimport {NavLink, Redirect, useHistory, useParams} from \"react-router-dom\";\r\nimport {useDispatch} from \"react-redux\";\r\nimport {SetNextStep, SetStepComplete} from \"../../../../redux/ActionCreators/CalcActionsCreators\";\r\nimport {GetChosenTypes} from \"../../../../functions/PointTestFunctions\";\r\nimport ChosenTypes from \"../ViewResultPoints/ChosenTypes\";\r\nimport SuccessDialog from \"../CustomComponents/SuccessDialog\";\r\nimport MistakeDialog from \"../CustomComponents/MistakeDialog\";\r\n\r\ntype useParamsType = {\r\n    pointId: string\r\n}\r\n\r\nconst PointTypesSelection = (props: any) => {\r\n    let {pointId} = useParams<useParamsType>();\r\n    const history = useHistory();\r\n    const [isFinish, SetIsFinish] = useState<boolean>(false);\r\n    const [isMistake, SetIsMistake] = useState<boolean>(false);\r\n    const [currentMeasures, SetCurrentMeasures] = useState<Array<string>|null>();\r\n    const dispatch = useDispatch();\r\n\r\n    useEffect(()=>{\r\n        SetCurrentMeasures(GetChosenTypes());\r\n    },[GetChosenTypes])\r\n\r\n    const checkStepRight = () => {\r\n        let success = true;\r\n        if(sessionStorage.getItem(\"currentMeasureSequence\")){\r\n            let currentMeasureSequenceArray: Array<number> = JSON.parse(sessionStorage.getItem(\"currentMeasureSequence\")!);\r\n            switch (props.stepNumber){\r\n                case 1:{\r\n                    if(currentMeasureSequenceArray.length !== 4)\r\n                        success = false;\r\n                    break;\r\n                }\r\n                case 2:{\r\n                    if(currentMeasureSequenceArray.length !== 3)\r\n                        success = false;\r\n                    break;\r\n                }\r\n            }\r\n            if(success){\r\n                for(let i=0;i<currentMeasureSequenceArray.length;i++){\r\n                    if(currentMeasureSequenceArray[i] !== i+1){\r\n                        success = false;\r\n                        break;\r\n                    }\r\n                }\r\n            }\r\n        }else{\r\n            success = false;\r\n        }\r\n        if(success){\r\n            sessionStorage.removeItem(\"currentMeasureSequence\");\r\n            SetCurrentMeasures(null);\r\n            SetIsFinish(true);\r\n        }else{\r\n            sessionStorage.removeItem(\"currentMeasureSequence\");\r\n            SetCurrentMeasures(null);\r\n            SetIsMistake(true);\r\n        }\r\n\r\n    }\r\n\r\n    const returnButtonClick = () =>{\r\n        history.push(\"/testing/viewPoints\");\r\n    }\r\n\r\n    return (\r\n        isFinish? <SuccessDialog stepNumber={props.stepNumber} SetIsFinish={SetIsFinish}/>\r\n        : isMistake ? <MistakeDialog SetIsMistake={SetIsMistake}/>\r\n        :<>\r\n            <button className={style.historyBackButton} onClick={returnButtonClick}>Вернуться к выбору конструкции</button>\r\n            <div className={style.pointSelectionContainer}>\r\n                <ChosenTypes\r\n                    currentMeasures={currentMeasures}\r\n                    SetCurrentMeasures={SetCurrentMeasures}\r\n                />\r\n                <div className={style.pointSelectionContent}>\r\n                    <div className={style.pointSelectionGrid}>\r\n                        <div id= \"1\" className={style.grid_types}>\r\n                            <NavLink to={\"/testing/viewPoints/Point/\"+pointId+\"/Measure/1\"}>Измерение тест-сигнала</NavLink>\r\n                        </div>\r\n                        <div id= \"2\" className={style.grid_types}>\r\n                            <NavLink to={\"/testing/viewPoints/Point/\"+pointId+\"/Measure/2\"}>Измерение информативного сигнала и фона</NavLink>\r\n                        </div>\r\n                        <div id= \"3\" className={style.grid_types}>\r\n                            <NavLink to={\"/testing/viewPoints/Point/\"+pointId+\"/Measure/3\"}>Измерение фона</NavLink>\r\n                        </div>\r\n                        <div id= \"4\" className={style.grid_types}>\r\n                            <NavLink to={\"/testing/viewPoints/Point/\"+pointId+\"/Measure/4\"}>Измерение помехи</NavLink>\r\n                        </div>\r\n                    </div>\r\n                    <button className=\"button_classic\" onClick={checkStepRight}>Завершить выполнения этапа</button>\r\n                </div>\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default PointTypesSelection;","C:\\Users\\Aleksey\\Desktop\\main\\my_projects\\TritoneProject\\frontend\\frontend-app\\src\\components\\Testing\\Section3\\ViewResultChoseColumns\\ChoseColumns.tsx",[],"C:\\Users\\Aleksey\\Desktop\\main\\my_projects\\TritoneProject\\frontend\\frontend-app\\src\\redux\\selectors\\diagram-selector.ts",[],"C:\\Users\\Aleksey\\Desktop\\main\\my_projects\\TritoneProject\\frontend\\frontend-app\\src\\components\\Testing\\Section3\\ViewResultTableCalc\\TableCalc.tsx",["414","415","416"],"import React, {useCallback, useEffect, useMemo, useState} from \"react\";\r\nimport style from \"./TableCalc.module.css\"\r\nimport MaterialTable from \"../CustomComponents/MaterialTable\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {GetSelectedVariables} from \"../../../../redux/selectors/calc-selector\";\r\nimport {GridColumns, GridEditCellPropsParams, GridRowsProp} from \"@material-ui/data-grid\";\r\nimport {VariableWithValuesType} from \"../../../../types/generalTypes\";\r\nimport {CheckCalculations, CreateTableColumns, CreateTableRows} from \"../../../../functions/PointTestFunctions\";\r\nimport SuccessDialog from \"../CustomComponents/SuccessDialog\";\r\nimport MistakeDialog from \"../CustomComponents/MistakeDialog\";\r\nimport {SetSectionComplete} from \"../../../../redux/ThunkCreators/testingThunks\";\r\n\r\nconst TableCalc = (props: { stepNumber: number }) => {\r\n    const variables: VariableWithValuesType[] = useSelector(GetSelectedVariables);\r\n    const [isAutoFill, SetAutoFill] = useState<boolean>(false);\r\n    const [isFinish, SetIsFinish] = useState<boolean>(false);\r\n    const [isMistake, SetIsMistake] = useState<boolean>(false);\r\n    const tableColumns: GridColumns = useMemo(() => CreateTableColumns(variables), [variables]);\r\n    const tableRows: GridRowsProp = useMemo(() => CreateTableRows(variables, isAutoFill), [variables, isAutoFill]);\r\n    const [calculatedVariables, SetCalculatedVariables] = useState<{ [p: string]: Array<number> }>({\r\n        delta: new Array<number>(11).fill(0, 0, 11),\r\n        isolationValues: new Array<number>(11).fill(0, 0, 11)\r\n    });\r\n    const dispatch = useDispatch();\r\n\r\n    useEffect(()=>{\r\n        if(isFinish){\r\n            dispatch(SetSectionComplete(3));\r\n        }\r\n    },[isFinish])\r\n\r\n    const WriteValueFromTable = useCallback((valueData: GridEditCellPropsParams) => {\r\n        SetCalculatedVariables(prevSate => {\r\n            let values = [...prevSate[valueData.field as string]];\r\n            values.splice((valueData.id as number) - 1, 1, valueData.props.value as number);\r\n\r\n            return {...prevSate, [valueData.field as string]: [...values]}\r\n        });\r\n    }, []);\r\n\r\n    const OnCheckButtonHandler = () => {\r\n        CheckCalculations(variables, calculatedVariables) ? SetIsFinish(true) : SetIsMistake(true);\r\n    }\r\n\r\n    const OnFillAnswersButtonHandler = () => {\r\n        let rightDelta: Array<number> = variables.find(el => el.valuesName === \"delta\")!.values;\r\n        let rightIsolationValues: Array<number> = variables.find(el => el.valuesName === \"isolationValues\")!.values;\r\n        SetCalculatedVariables(calculatedVariables => {\r\n            return {\r\n                ...calculatedVariables,\r\n                [\"delta\"]: rightDelta,\r\n                [\"isolationValues\"]: rightIsolationValues,\r\n            }\r\n        });\r\n        SetAutoFill(true);\r\n    }\r\n\r\n    return (\r\n        isFinish ? <SuccessDialog stepNumber={props.stepNumber} SetIsFinish={SetIsFinish}/>\r\n            : isMistake ? <MistakeDialog SetIsMistake={SetIsMistake}/>\r\n            :<div className={style.TableContainer}>\r\n                <MaterialTable tableColumns={tableColumns} tableRows={tableRows} WriteValueFromTable={WriteValueFromTable}/>\r\n                <button className=\"button_classic\" onClick={OnCheckButtonHandler}>Завершить этап</button>\r\n                <button className=\"button_classic\" onClick={OnFillAnswersButtonHandler}>Заполнить ответы</button>\r\n            </div>\r\n    )\r\n}\r\n\r\nexport default TableCalc;","C:\\Users\\Aleksey\\Desktop\\main\\my_projects\\TritoneProject\\frontend\\frontend-app\\src\\components\\Testing\\Section2\\CustomComponents\\Question.tsx",["417","418","419"],"import React, {useEffect, useState} from 'react';\r\nimport style from '../Test.module.css';\r\nimport RadioGroup from '@material-ui/core/RadioGroup';\r\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\r\nimport FormControl from '@material-ui/core/FormControl';\r\nimport GreenRadio from \"./GreenRadio\";\r\nimport {QuizQuestion} from \"../../../../types/generalTypes\";\r\nimport {ExpandVariable} from \"../../../../functions/TestFunctions\";\r\n\r\ntype PropsType = {\r\n    currentQuestion: QuizQuestion,\r\n    SetSelectedAnswer: React.Dispatch<React.SetStateAction<number>>\r\n}\r\n\r\nconst Question: React.FC<PropsType> = (props) => {\r\n    const [value, SetValue] = useState<string>(`${props.currentQuestion.answers[0].answerId}`);\r\n\r\n    useEffect(() => {\r\n        props.SetSelectedAnswer(parseInt(value));\r\n    }, [])\r\n\r\n    useEffect(() => {\r\n        SetValue(`${props.currentQuestion.answers[0].answerId}`);\r\n        props.SetSelectedAnswer(props.currentQuestion.answers[0].answerId!);\r\n    }, [props.currentQuestion.answers[0].answerId])\r\n\r\n    const handleChange = (event: React.ChangeEvent<HTMLInputElement>) => {\r\n        SetValue((event.target as HTMLInputElement).value);\r\n        props.SetSelectedAnswer(parseInt((event.target as HTMLInputElement).value));\r\n    };\r\n\r\n    return (\r\n        <div className={style.question}>\r\n            <FormControl component=\"fieldset\">\r\n                <p className={style.questionText}>{props.currentQuestion.questionText}</p>\r\n                <RadioGroup value={value} onChange={handleChange}>\r\n                    {props.currentQuestion.answers.map(el => {\r\n                        let expandVariable = ExpandVariable(el.answerText);\r\n\r\n                        return <FormControlLabel value={`${el.answerId}`}\r\n                                                 control={<GreenRadio/>}\r\n                                                 label={<p className={style.AnswerText}>{\r\n                                                     expandVariable ? <>\r\n                                                             {expandVariable[0]}\r\n                                                             <sub>{expandVariable[1]}</sub>\r\n                                                         </>\r\n                                                         : <>{el.answerText}</>\r\n                                                 }</p>}\r\n\r\n                        />\r\n                    })\r\n                    }\r\n                </RadioGroup>\r\n            </FormControl>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Question;","C:\\Users\\Aleksey\\Desktop\\main\\my_projects\\TritoneProject\\frontend\\frontend-app\\src\\components\\Help\\HelpArticleList\\ArticleList.tsx",[],"C:\\Users\\Aleksey\\Desktop\\main\\my_projects\\TritoneProject\\frontend\\frontend-app\\src\\components\\Help\\HelpArticles\\GeneralArticle.tsx",[],"C:\\Users\\Aleksey\\Desktop\\main\\my_projects\\TritoneProject\\frontend\\frontend-app\\src\\components\\Testing\\Section1\\DiagramConstructor\\DiagramComponentsAndFunctions\\HelpFunctions.ts",[],"C:\\Users\\Aleksey\\Desktop\\main\\my_projects\\TritoneProject\\frontend\\frontend-app\\src\\components\\Testing\\Section1\\DiagramConstructor\\DiagramComponentsAndFunctions\\DiagramField.tsx",[],"C:\\Users\\Aleksey\\Desktop\\main\\my_projects\\TritoneProject\\frontend\\frontend-app\\src\\components\\Help\\HelpArticles\\EquipmentArticle.jsx",[],"C:\\Users\\Aleksey\\Desktop\\main\\my_projects\\TritoneProject\\frontend\\frontend-app\\src\\components\\Testing\\Section1\\DiagramConstructor\\ElementsList\\ElementsList.tsx",[],"C:\\Users\\Aleksey\\Desktop\\main\\my_projects\\TritoneProject\\frontend\\frontend-app\\src\\components\\Testing\\Section1\\DiagramConstructor\\DiagramComponentsAndFunctions\\SplitDiagramField.jsx",[],"C:\\Users\\Aleksey\\Desktop\\main\\my_projects\\TritoneProject\\frontend\\frontend-app\\src\\redux\\ActionCreators\\StatisticActionCreators.ts",[],"C:\\Users\\Aleksey\\Desktop\\main\\my_projects\\TritoneProject\\frontend\\frontend-app\\src\\redux\\ActionCreators\\EditActionCreators.ts",[],"C:\\Users\\Aleksey\\Desktop\\main\\my_projects\\TritoneProject\\frontend\\frontend-app\\src\\redux\\ActionCreators\\DiagramActionCreators.ts",[],"C:\\Users\\Aleksey\\Desktop\\main\\my_projects\\TritoneProject\\frontend\\frontend-app\\src\\redux\\ActionCreators\\TestActionCreators.ts",[],"C:\\Users\\Aleksey\\Desktop\\main\\my_projects\\TritoneProject\\frontend\\frontend-app\\src\\types\\apiTypes.ts",[],"C:\\Users\\Aleksey\\Desktop\\main\\my_projects\\TritoneProject\\frontend\\frontend-app\\src\\redux\\ActionCreators\\TestingActionCreators.ts",[],"C:\\Users\\Aleksey\\Desktop\\main\\my_projects\\TritoneProject\\frontend\\frontend-app\\src\\api\\userApi.ts",[],"C:\\Users\\Aleksey\\Desktop\\main\\my_projects\\TritoneProject\\frontend\\frontend-app\\src\\api\\editApi.ts",[],"C:\\Users\\Aleksey\\Desktop\\main\\my_projects\\TritoneProject\\frontend\\frontend-app\\src\\api\\statisticApi.ts",[],"C:\\Users\\Aleksey\\Desktop\\main\\my_projects\\TritoneProject\\frontend\\frontend-app\\src\\api\\testingApi.ts",[],"C:\\Users\\Aleksey\\Desktop\\main\\my_projects\\TritoneProject\\frontend\\frontend-app\\src\\functions\\TestFunctions.ts",[],"C:\\Users\\Aleksey\\Desktop\\main\\my_projects\\TritoneProject\\frontend\\frontend-app\\src\\redux\\ActionCreators\\HelpActionCreators.ts",[],"C:\\Users\\Aleksey\\Desktop\\main\\my_projects\\TritoneProject\\frontend\\frontend-app\\src\\components\\Testing\\Section3\\CustomComponents\\MistakeDialog.tsx",["420"],"import React from 'react';\r\nimport Dialog from '@material-ui/core/Dialog';\r\nimport DialogActions from '@material-ui/core/DialogActions';\r\nimport Slide from '@material-ui/core/Slide';\r\nimport { TransitionProps } from '@material-ui/core/transitions';\r\nimport {useDispatch} from \"react-redux\";\r\nimport style from \"../ViewResult.module.css\"\r\nimport ErrorTwoToneIcon from '@material-ui/icons/ErrorTwoTone';\r\n\r\nconst Transition = React.forwardRef(function Transition(\r\n    props: TransitionProps & { children?: React.ReactElement<any, any> },\r\n    ref: React.Ref<unknown>,\r\n) {\r\n    return <Slide direction=\"up\" ref={ref} {...props} />;\r\n});\r\n\r\nconst MistakeDialog = (props: {SetIsMistake: React.Dispatch<React.SetStateAction<boolean>>}) => {\r\n    const [open, setOpen] = React.useState(true);\r\n\r\n    const OnFinishButtonHandler = () => {\r\n        setOpen(false);\r\n        props.SetIsMistake(false)\r\n    };\r\n\r\n    return (\r\n        <div className={style.dialogSuccess}>\r\n            <Dialog\r\n                open={open}\r\n                TransitionComponent={Transition}\r\n                keepMounted\r\n                className={style.dialog}\r\n                style={{ color: \"#ffdede\"}}\r\n            >\r\n                <h2>\r\n                    <ErrorTwoToneIcon style={{ color: \"#ff6363\"}} fontSize=\"default\"/>\r\n                    {\"Ошибка при прохождении этапа\"}\r\n                </h2>\r\n                <p>\r\n                    Чтобы перейти на следующий этап, необходимо выполнить текущий.\r\n                    Для повторного прохождения нажмите на конпку \"Пройти этап сначала\".\r\n                </p>\r\n                <DialogActions>\r\n                    <button onClick={OnFinishButtonHandler} className=\"button_classic\">\r\n                        Пройти этап сначала\r\n                    </button>\r\n                </DialogActions>\r\n            </Dialog>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default MistakeDialog;\r\n","C:\\Users\\Aleksey\\Desktop\\main\\my_projects\\TritoneProject\\frontend\\frontend-app\\src\\components\\Testing\\Section3\\ViewResultPoints\\ChosenTypes.tsx",[],"C:\\Users\\Aleksey\\Desktop\\main\\my_projects\\TritoneProject\\frontend\\frontend-app\\src\\components\\Testing\\Section3\\CustomComponents\\SuccessDialog.tsx",["421"],"import React from 'react';\r\nimport Dialog from '@material-ui/core/Dialog';\r\nimport DialogActions from '@material-ui/core/DialogActions';\r\nimport Slide from '@material-ui/core/Slide';\r\nimport { TransitionProps } from '@material-ui/core/transitions';\r\nimport {useDispatch} from \"react-redux\";\r\nimport {SetNextStep, SetStepComplete} from \"../../../../redux/ActionCreators/CalcActionsCreators\";\r\nimport style from \"../ViewResult.module.css\"\r\nimport CheckCircleTwoToneIcon from '@material-ui/icons/CheckCircleTwoTone';\r\nimport {formatAngleOfSector} from \"recharts/types/util/PolarUtils\";\r\n\r\nconst Transition = React.forwardRef(function Transition(\r\n    props: TransitionProps & { children?: React.ReactElement<any, any> },\r\n    ref: React.Ref<unknown>,\r\n) {\r\n    return <Slide direction=\"up\" ref={ref} {...props} />;\r\n});\r\n\r\nconst SuccessDialog = (props: {stepNumber: number, SetIsFinish: React.Dispatch<React.SetStateAction<boolean>>}) => {\r\n    const [open, setOpen] = React.useState(true);\r\n    const dispatch = useDispatch();\r\n\r\n    const OnFinishButtonHandler = () => {\r\n        setOpen(false);\r\n        props.SetIsFinish(false);\r\n        dispatch(SetStepComplete(props.stepNumber));\r\n        dispatch(SetNextStep());\r\n    };\r\n\r\n    return (\r\n        <div>\r\n            <Dialog\r\n                open={open}\r\n                TransitionComponent={Transition}\r\n                keepMounted\r\n                className={style.dialog}\r\n                style={{ color: \"#e8ffe8\"}}\r\n            >\r\n                <h2>\r\n                    <CheckCircleTwoToneIcon style={{ color: \"#8ed78e\"}} fontSize=\"default\"/>\r\n                    {\"Этап пройден успешно!\"}\r\n                </h2>\r\n                <p>\r\n                    Для того чтобы перейти на следующий этап, нажмите на конпку \"К следующему этапу\".\r\n                </p>\r\n                <DialogActions>\r\n                    <button onClick={OnFinishButtonHandler} className=\"button_classic\">\r\n                        К следующему этапу\r\n                    </button>\r\n                </DialogActions>\r\n            </Dialog>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default SuccessDialog;\r\n","C:\\Users\\Aleksey\\Desktop\\main\\my_projects\\TritoneProject\\frontend\\frontend-app\\src\\components\\Testing\\Section2\\CustomComponents\\GreenRadio.tsx",[],"C:\\Users\\Aleksey\\Desktop\\main\\my_projects\\TritoneProject\\frontend\\frontend-app\\src\\components\\Testing\\Section3\\CustomComponents\\MaterialSelect.tsx",[],"C:\\Users\\Aleksey\\Desktop\\main\\my_projects\\TritoneProject\\frontend\\frontend-app\\src\\components\\Testing\\Section3\\CustomComponents\\MaterialTable.tsx",[],"C:\\Users\\Aleksey\\Desktop\\main\\my_projects\\TritoneProject\\frontend\\frontend-app\\src\\components\\Testing\\Section3\\CustomComponents\\CustomTooltip.jsx",[],"C:\\Users\\Aleksey\\Desktop\\main\\my_projects\\TritoneProject\\frontend\\frontend-app\\src\\components\\Testing\\Section1\\DiagramConstructor\\DiagramComponentsAndFunctions\\Field.jsx",["422"],"import ReactFlow, {addEdge, Controls, isEdge, ReactFlowProvider, removeElements} from \"react-flow-renderer\";\r\n\r\nimport {\r\n    AddElementOnField,\r\n    DeleteElementFromField, RefreshElementsList, SetSAZOn,\r\n} from \"../../../../../redux/ActionCreators/DiagramActionCreators\";\r\n\r\nimport React, {useEffect, useRef, useState} from \"react\";\r\nimport {useDispatch} from \"react-redux\";\r\nimport myStyle from \"../DiagramConstructor.module.css\";\r\nimport NodeComponent from \"./NodeComponent\";\r\nimport Edge from \"./Edge\";\r\nimport ConnectionLine from \"./ConnectionLine\";\r\nimport {RemoveConnections} from \"./HelpFunctions\";\r\n\r\nconst Filed = (props) => {\r\n    const reactFlowWrapper = useRef(null);\r\n    const [reactFlowInstance, setReactFlowInstance] = useState(null);\r\n    const [elements, setElements] = useState([]);\r\n    const dispatch = useDispatch();\r\n\r\n    useEffect(()=> {\r\n        props.setResultElements(elements);\r\n    },[elements, props]);\r\n\r\n    useEffect(()=>{\r\n        if(props.needCleanField){\r\n            setElements([]);\r\n            dispatch(RefreshElementsList());\r\n            props.setNeedClean(false);\r\n        }\r\n    },[props.needCleanField])\r\n\r\n    const isValidConnection = (connection) => {\r\n        for (let i = 0; i < props.connections.length; i++) {\r\n            let handle = props.connections[i].split('-');\r\n            if (handle[0].substring(0, 1) === connection.target || handle[0].substring(0, 1) === connection.source)\r\n                return false;\r\n            if (handle[1].substring(0, 1) === connection.target || handle[0].substring(0, 1) === connection.source)\r\n                return false;\r\n        }\r\n        return true;\r\n    }\r\n\r\n    const onConnect = (params) => {\r\n        let paramsCopy = {\r\n            ...params,\r\n            id: `${params.source}${params.sourceHandle}-${params.target}${params.targetHandle}`,\r\n            type: 'custom'\r\n        };\r\n\r\n        props.setConnection(connections => [...connections, paramsCopy.id]);\r\n        setElements((els) => addEdge(paramsCopy, els));\r\n    };\r\n\r\n    const onElementsRemove = (elementsToRemove) => {\r\n        let connectionsToRemove = [];\r\n\r\n        elementsToRemove.forEach(el => {\r\n            isEdge(el) ? connectionsToRemove.push(el.id)\r\n                : dispatch(DeleteElementFromField(parseInt(el.id)));\r\n        })\r\n\r\n        props.setConnection(RemoveConnections(props.connections, connectionsToRemove));\r\n        setElements((els) => removeElements(elementsToRemove, els));\r\n    }\r\n\r\n    const onLoad = (_reactFlowInstance) =>\r\n        setReactFlowInstance(_reactFlowInstance);\r\n\r\n    const onDragOver = (event) => {\r\n        event.preventDefault();\r\n        event.dataTransfer.dropEffect = 'move';\r\n    };\r\n\r\n    const onDrop = (event) => {\r\n        event.preventDefault();\r\n        const reactFlowBounds = reactFlowWrapper.current.getBoundingClientRect();\r\n        const [id, image, name, text] = event.dataTransfer.getData('text/plain').split('|');\r\n        const position = reactFlowInstance.project({\r\n            x: event.clientX - reactFlowBounds.left,\r\n            y: event.clientY - reactFlowBounds.top,\r\n        });\r\n        const newNode = {\r\n            id: id,\r\n            type: 'special',\r\n            position,\r\n            data: {label: `${name}`, img: image, text: text, isValidConnection: isValidConnection},\r\n        };\r\n\r\n        if(id===\"19\")\r\n            dispatch(SetSAZOn());\r\n\r\n        setElements((es) => es.concat(newNode));\r\n        props.setResultElements(elements);\r\n        dispatch(AddElementOnField(parseInt(id)));\r\n    };\r\n\r\n    return (\r\n        <div id=\"schema_field\" className={`${myStyle.constructor_field} ${props.smallField && myStyle.small_constructor_field}`}>\r\n            <ReactFlowProvider>\r\n                <div style={props.smallField ? {height: '70vh', width: '33.3vw'} : {height: '70vh', width: '70vw'}} ref={reactFlowWrapper}>\r\n                    <ReactFlow\r\n                        elements={elements}\r\n                        onConnect={onConnect}\r\n                        onElementsRemove={onElementsRemove}\r\n                        onLoad={onLoad}\r\n                        onDrop={onDrop}\r\n                        onDragOver={onDragOver}\r\n                        nodeTypes={{special: NodeComponent}}\r\n                        edgeTypes={{custom: Edge}}\r\n                        connectionLineComponent={ConnectionLine}\r\n                    >\r\n                        <Controls/>\r\n                    </ReactFlow>\r\n                </div>\r\n            </ReactFlowProvider>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Filed;\r\n\r\n","C:\\Users\\Aleksey\\Desktop\\main\\my_projects\\TritoneProject\\frontend\\frontend-app\\src\\components\\Testing\\Section1\\DiagramConstructor\\DiagramComponentsAndFunctions\\ConnectionLine.jsx",[],"C:\\Users\\Aleksey\\Desktop\\main\\my_projects\\TritoneProject\\frontend\\frontend-app\\src\\components\\Testing\\Section1\\DiagramConstructor\\DiagramComponentsAndFunctions\\Edge.jsx",[],"C:\\Users\\Aleksey\\Desktop\\main\\my_projects\\TritoneProject\\frontend\\frontend-app\\src\\components\\Testing\\Section1\\DiagramConstructor\\DiagramComponentsAndFunctions\\NodeComponent.jsx",[],["423","424"],"C:\\Users\\Aleksey\\Desktop\\main\\my_projects\\TritoneProject\\frontend\\frontend-app\\src\\components\\Main\\Main.tsx",[],{"ruleId":"425","replacedBy":"426"},{"ruleId":"427","replacedBy":"428"},{"ruleId":"429","severity":1,"message":"430","line":17,"column":7,"nodeType":"431","endLine":17,"endColumn":9,"suggestions":"432"},{"ruleId":"433","severity":1,"message":"434","line":13,"column":5,"nodeType":"435","messageId":"436","endLine":13,"endColumn":28},{"ruleId":"429","severity":1,"message":"437","line":63,"column":7,"nodeType":"431","endLine":63,"endColumn":37,"suggestions":"438"},{"ruleId":"433","severity":1,"message":"439","line":5,"column":18,"nodeType":"435","messageId":"436","endLine":5,"endColumn":26},{"ruleId":"433","severity":1,"message":"440","line":8,"column":23,"nodeType":"435","messageId":"436","endLine":8,"endColumn":41},{"ruleId":"433","severity":1,"message":"441","line":8,"column":43,"nodeType":"435","messageId":"436","endLine":8,"endColumn":54},{"ruleId":"433","severity":1,"message":"442","line":11,"column":6,"nodeType":"435","messageId":"436","endLine":11,"endColumn":15},{"ruleId":"429","severity":1,"message":"430","line":59,"column":7,"nodeType":"431","endLine":59,"endColumn":9,"suggestions":"443"},{"ruleId":"429","severity":1,"message":"444","line":84,"column":7,"nodeType":"431","endLine":84,"endColumn":34,"suggestions":"445"},{"ruleId":"429","severity":1,"message":"430","line":13,"column":7,"nodeType":"431","endLine":13,"endColumn":9,"suggestions":"446"},{"ruleId":"429","severity":1,"message":"430","line":14,"column":8,"nodeType":"431","endLine":14,"endColumn":10,"suggestions":"447"},{"ruleId":"429","severity":1,"message":"448","line":78,"column":8,"nodeType":"431","endLine":78,"endColumn":23,"suggestions":"449"},{"ruleId":"429","severity":1,"message":"430","line":111,"column":7,"nodeType":"431","endLine":111,"endColumn":9,"suggestions":"450"},{"ruleId":"429","severity":1,"message":"430","line":18,"column":8,"nodeType":"431","endLine":18,"endColumn":10,"suggestions":"451"},{"ruleId":"429","severity":1,"message":"430","line":14,"column":8,"nodeType":"431","endLine":14,"endColumn":10,"suggestions":"452"},{"ruleId":"425","replacedBy":"426"},{"ruleId":"427","replacedBy":"428"},{"ruleId":"433","severity":1,"message":"453","line":3,"column":35,"nodeType":"435","messageId":"436","endLine":3,"endColumn":43},{"ruleId":"433","severity":1,"message":"454","line":136,"column":19,"nodeType":"435","messageId":"436","endLine":136,"endColumn":23},{"ruleId":"433","severity":1,"message":"455","line":6,"column":24,"nodeType":"435","messageId":"436","endLine":6,"endColumn":42},{"ruleId":"429","severity":1,"message":"456","line":22,"column":8,"nodeType":"431","endLine":22,"endColumn":10,"suggestions":"457"},{"ruleId":"433","severity":1,"message":"458","line":7,"column":9,"nodeType":"435","messageId":"436","endLine":7,"endColumn":20},{"ruleId":"433","severity":1,"message":"459","line":7,"column":22,"nodeType":"435","messageId":"436","endLine":7,"endColumn":37},{"ruleId":"433","severity":1,"message":"460","line":1,"column":16,"nodeType":"435","messageId":"436","endLine":1,"endColumn":27},{"ruleId":"433","severity":1,"message":"439","line":3,"column":18,"nodeType":"435","messageId":"436","endLine":3,"endColumn":26},{"ruleId":"433","severity":1,"message":"458","line":5,"column":9,"nodeType":"435","messageId":"436","endLine":5,"endColumn":20},{"ruleId":"433","severity":1,"message":"459","line":5,"column":22,"nodeType":"435","messageId":"436","endLine":5,"endColumn":37},{"ruleId":"433","severity":1,"message":"461","line":21,"column":11,"nodeType":"435","messageId":"436","endLine":21,"endColumn":19},{"ruleId":"429","severity":1,"message":"462","line":25,"column":7,"nodeType":"431","endLine":25,"endColumn":23,"suggestions":"463"},{"ruleId":"429","severity":1,"message":"430","line":30,"column":7,"nodeType":"431","endLine":30,"endColumn":17,"suggestions":"464"},{"ruleId":"465","severity":1,"message":"466","line":51,"column":17,"nodeType":"467","messageId":"468","endLine":51,"endColumn":38,"fix":"469"},{"ruleId":"465","severity":1,"message":"470","line":52,"column":17,"nodeType":"467","messageId":"468","endLine":52,"endColumn":58,"fix":"471"},{"ruleId":"429","severity":1,"message":"472","line":20,"column":8,"nodeType":"431","endLine":20,"endColumn":10,"suggestions":"473"},{"ruleId":"429","severity":1,"message":"474","line":25,"column":8,"nodeType":"431","endLine":25,"endColumn":51,"suggestions":"475"},{"ruleId":"429","severity":1,"message":"476","line":25,"column":9,"nodeType":"477","endLine":25,"endColumn":50},{"ruleId":"433","severity":1,"message":"478","line":6,"column":9,"nodeType":"435","messageId":"436","endLine":6,"endColumn":20},{"ruleId":"433","severity":1,"message":"479","line":10,"column":9,"nodeType":"435","messageId":"436","endLine":10,"endColumn":28},{"ruleId":"429","severity":1,"message":"480","line":32,"column":7,"nodeType":"431","endLine":32,"endColumn":29,"suggestions":"481"},{"ruleId":"425","replacedBy":"482"},{"ruleId":"427","replacedBy":"483"},"no-native-reassign",["484"],"no-negated-in-lhs",["485"],"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'dispatch'. Either include it or remove the dependency array.","ArrayExpression",["486"],"@typescript-eslint/no-unused-vars","'GetPointNameTranslation' is defined but never used.","Identifier","unusedVar","React Hook useEffect has a missing dependency: 'typeId'. Either include it or remove the dependency array.",["487"],"'Redirect' is defined but never used.","'GetUserAccessToken' is defined but never used.","'GetUserInfo' is defined but never used.","'PropsType' is defined but never used.",["488"],"React Hook useEffect has a missing dependency: 'pointProgress'. Either include it or remove the dependency array.",["489"],["490"],["491"],"React Hook useMemo has an unnecessary dependency: 'statisticData'. Either exclude it or remove the dependency array.",["492"],["493"],["494"],["495"],"'QuizType' is defined but never used.","'meta' is assigned a value but never used.","'SetSectionComplete' is defined but never used.","React Hook useEffect has missing dependencies: 'dispatch' and 'props.selectedAnswers'. Either include them or remove the dependency array.",["496"],"'SetNextStep' is defined but never used.","'SetStepComplete' is defined but never used.","'useCallback' is defined but never used.","'dispatch' is assigned a value but never used.","React Hook useEffect has an unnecessary dependency: 'GetChosenTypes'. Either exclude it or remove the dependency array. Outer scope values like 'GetChosenTypes' aren't valid dependencies because mutating them doesn't re-render the component.",["497"],["498"],"no-useless-computed-key","Unnecessarily computed property [\"delta\"] found.","Property","unnecessarilyComputedProperty",{"range":"499","text":"500"},"Unnecessarily computed property [\"isolationValues\"] found.",{"range":"501","text":"502"},"React Hook useEffect has missing dependencies: 'props' and 'value'. Either include them or remove the dependency array. However, 'props' will change when *any* prop changes, so the preferred fix is to destructure the 'props' object outside of the useEffect call and refer to those specific props inside useEffect.",["503"],"React Hook useEffect has a missing dependency: 'props'. Either include it or remove the dependency array. However, 'props' will change when *any* prop changes, so the preferred fix is to destructure the 'props' object outside of the useEffect call and refer to those specific props inside useEffect.",["504"],"React Hook useEffect has a complex expression in the dependency array. Extract it to a separate variable so it can be statically checked.","MemberExpression","'useDispatch' is defined but never used.","'formatAngleOfSector' is defined but never used.","React Hook useEffect has missing dependencies: 'dispatch' and 'props'. Either include them or remove the dependency array. However, 'props' will change when *any* prop changes, so the preferred fix is to destructure the 'props' object outside of the useEffect call and refer to those specific props inside useEffect.",["505"],["484"],["485"],"no-global-assign","no-unsafe-negation",{"desc":"506","fix":"507"},{"desc":"508","fix":"509"},{"desc":"506","fix":"510"},{"desc":"511","fix":"512"},{"desc":"506","fix":"513"},{"desc":"506","fix":"514"},{"desc":"515","fix":"516"},{"desc":"506","fix":"517"},{"desc":"506","fix":"518"},{"desc":"506","fix":"519"},{"desc":"520","fix":"521"},{"desc":"515","fix":"522"},{"desc":"523","fix":"524"},[2698,2707],"\"delta\"",[2738,2757],"\"isolationValues\"",{"desc":"525","fix":"526"},{"desc":"527","fix":"528"},{"desc":"529","fix":"530"},"Update the dependencies array to be: [dispatch]",{"range":"531","text":"532"},"Update the dependencies array to be: [myDispatch, currentPointInfo, typeId]",{"range":"533","text":"534"},{"range":"535","text":"532"},"Update the dependencies array to be: [pointProgress, pointProgress.currentStep]",{"range":"536","text":"537"},{"range":"538","text":"532"},{"range":"539","text":"532"},"Update the dependencies array to be: []",{"range":"540","text":"541"},{"range":"542","text":"532"},{"range":"543","text":"532"},{"range":"544","text":"532"},"Update the dependencies array to be: [dispatch, props.selectedAnswers]",{"range":"545","text":"546"},{"range":"547","text":"541"},"Update the dependencies array to be: [dispatch, isFinish]",{"range":"548","text":"549"},"Update the dependencies array to be: [props, value]",{"range":"550","text":"551"},"Update the dependencies array to be: [props]",{"range":"552","text":"553"},"Update the dependencies array to be: [dispatch, props, props.needCleanField]",{"range":"554","text":"555"},[771,773],"[dispatch]",[2245,2275],"[myDispatch, currentPointInfo, typeId]",[2342,2344],[3209,3236],"[pointProgress, pointProgress.currentStep]",[443,445],[502,504],[2587,2602],"[]",[3972,3974],[866,868],[486,488],[975,977],"[dispatch, props.selectedAnswers]",[1121,1137],[1730,1740],"[dispatch, isFinish]",[809,811],"[props, value]",[991,1034],"[props]",[1128,1150],"[dispatch, props, props.needCleanField]"]