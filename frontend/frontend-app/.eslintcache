[{"C:\\Users\\volko\\Desktop\\main\\myProjects\\TritoneProject\\frontend\\frontend-app\\src\\index.tsx":"1","C:\\Users\\volko\\Desktop\\main\\myProjects\\TritoneProject\\frontend\\frontend-app\\src\\redux\\store.ts":"2","C:\\Users\\volko\\Desktop\\main\\myProjects\\TritoneProject\\frontend\\frontend-app\\src\\App.tsx":"3","C:\\Users\\volko\\Desktop\\main\\myProjects\\TritoneProject\\frontend\\frontend-app\\src\\redux\\reducers\\help-reducer.ts":"4","C:\\Users\\volko\\Desktop\\main\\myProjects\\TritoneProject\\frontend\\frontend-app\\src\\redux\\reducers\\appData-reducer.ts":"5","C:\\Users\\volko\\Desktop\\main\\myProjects\\TritoneProject\\frontend\\frontend-app\\src\\redux\\reducers\\user-reducer.ts":"6","C:\\Users\\volko\\Desktop\\main\\myProjects\\TritoneProject\\frontend\\frontend-app\\src\\redux\\reducers\\TestReducers\\testing-reducer.ts":"7","C:\\Users\\volko\\Desktop\\main\\myProjects\\TritoneProject\\frontend\\frontend-app\\src\\redux\\reducers\\TestReducers\\diagramElements-reducer.ts":"8","C:\\Users\\volko\\Desktop\\main\\myProjects\\TritoneProject\\frontend\\frontend-app\\src\\redux\\reducers\\TestReducers\\calc-reducer.ts":"9","C:\\Users\\volko\\Desktop\\main\\myProjects\\TritoneProject\\frontend\\frontend-app\\src\\redux\\ActionCreators\\UserActionCreators.ts":"10","C:\\Users\\volko\\Desktop\\main\\myProjects\\TritoneProject\\frontend\\frontend-app\\src\\redux\\selectors\\user-selector.ts":"11","C:\\Users\\volko\\Desktop\\main\\myProjects\\TritoneProject\\frontend\\frontend-app\\src\\hoc\\withSuspense.tsx":"12","C:\\Users\\volko\\Desktop\\main\\myProjects\\TritoneProject\\frontend\\frontend-app\\src\\components\\Auth\\Auth.tsx":"13","C:\\Users\\volko\\Desktop\\main\\myProjects\\TritoneProject\\frontend\\frontend-app\\src\\components\\Main\\Main.tsx":"14","C:\\Users\\volko\\Desktop\\main\\myProjects\\TritoneProject\\frontend\\frontend-app\\src\\components\\Header\\Header.tsx":"15","C:\\Users\\volko\\Desktop\\main\\myProjects\\TritoneProject\\frontend\\frontend-app\\src\\components\\Testing\\Testing.tsx":"16","C:\\Users\\volko\\Desktop\\main\\myProjects\\TritoneProject\\frontend\\frontend-app\\src\\components\\Registration\\Registration.tsx":"17","C:\\Users\\volko\\Desktop\\main\\myProjects\\TritoneProject\\frontend\\frontend-app\\src\\components\\Testing\\Section3\\ViewResultPoints\\PointTest.tsx":"18","C:\\Users\\volko\\Desktop\\main\\myProjects\\TritoneProject\\frontend\\frontend-app\\src\\components\\Testing\\Section3\\ViewResult.tsx":"19","C:\\Users\\volko\\Desktop\\main\\myProjects\\TritoneProject\\frontend\\frontend-app\\src\\components\\Help\\Help.tsx":"20","C:\\Users\\volko\\Desktop\\main\\myProjects\\TritoneProject\\frontend\\frontend-app\\src\\components\\Testing\\Section1\\DiagramConstructor\\DiagramConstructor.jsx":"21","C:\\Users\\volko\\Desktop\\main\\myProjects\\TritoneProject\\frontend\\frontend-app\\src\\functions\\Random.ts":"22","C:\\Users\\volko\\Desktop\\main\\myProjects\\TritoneProject\\frontend\\frontend-app\\src\\functions\\PointTestFunctions.ts":"23","C:\\Users\\volko\\Desktop\\main\\myProjects\\TritoneProject\\frontend\\frontend-app\\src\\types\\generalTypes.ts":"24","C:\\Users\\volko\\Desktop\\main\\myProjects\\TritoneProject\\frontend\\frontend-app\\src\\redux\\selectors\\appData-selector.ts":"25","C:\\Users\\volko\\Desktop\\main\\myProjects\\TritoneProject\\frontend\\frontend-app\\src\\redux\\ActionCreators\\CalcActionsCreators.ts":"26","C:\\Users\\volko\\Desktop\\main\\myProjects\\TritoneProject\\frontend\\frontend-app\\src\\redux\\selectors\\help-selector.ts":"27","C:\\Users\\volko\\Desktop\\main\\myProjects\\TritoneProject\\frontend\\frontend-app\\src\\redux\\selectors\\calc-selector.ts":"28","C:\\Users\\volko\\Desktop\\main\\myProjects\\TritoneProject\\frontend\\frontend-app\\src\\redux\\ThunkCreators\\userThunks.ts":"29","C:\\Users\\volko\\Desktop\\main\\myProjects\\TritoneProject\\frontend\\frontend-app\\src\\redux\\ThunkCreators\\testingThunks.ts":"30","C:\\Users\\volko\\Desktop\\main\\myProjects\\TritoneProject\\frontend\\frontend-app\\src\\components\\Header\\DropMenu.tsx":"31","C:\\Users\\volko\\Desktop\\main\\myProjects\\TritoneProject\\frontend\\frontend-app\\src\\components\\Testing\\Section.tsx":"32","C:\\Users\\volko\\Desktop\\main\\myProjects\\TritoneProject\\frontend\\frontend-app\\src\\components\\Testing\\Section3\\CustomComponents\\PanelControl.tsx":"33","C:\\Users\\volko\\Desktop\\main\\myProjects\\TritoneProject\\frontend\\frontend-app\\src\\components\\Testing\\Section3\\ViewResultChoseColumns\\ChoseColumns.tsx":"34","C:\\Users\\volko\\Desktop\\main\\myProjects\\TritoneProject\\frontend\\frontend-app\\src\\components\\Testing\\Section3\\ViewResultTypes\\PointTypesSelection.tsx":"35","C:\\Users\\volko\\Desktop\\main\\myProjects\\TritoneProject\\frontend\\frontend-app\\src\\components\\Help\\HelpArticleList\\ArticleList.tsx":"36","C:\\Users\\volko\\Desktop\\main\\myProjects\\TritoneProject\\frontend\\frontend-app\\src\\components\\Help\\HelpArticles\\GeneralArticle.tsx":"37","C:\\Users\\volko\\Desktop\\main\\myProjects\\TritoneProject\\frontend\\frontend-app\\src\\redux\\selectors\\diagram-selector.ts":"38","C:\\Users\\volko\\Desktop\\main\\myProjects\\TritoneProject\\frontend\\frontend-app\\src\\components\\Testing\\Section3\\CustomComponents\\CustomBarChar.tsx":"39","C:\\Users\\volko\\Desktop\\main\\myProjects\\TritoneProject\\frontend\\frontend-app\\src\\components\\Testing\\Section1\\DiagramConstructor\\DiagramComponentsAndFunctions\\HelpFunctions.ts":"40","C:\\Users\\volko\\Desktop\\main\\myProjects\\TritoneProject\\frontend\\frontend-app\\src\\components\\Help\\HelpArticles\\EquipmentArticle.jsx":"41","C:\\Users\\volko\\Desktop\\main\\myProjects\\TritoneProject\\frontend\\frontend-app\\src\\components\\Testing\\Section1\\DiagramConstructor\\DiagramComponentsAndFunctions\\DiagramField.tsx":"42","C:\\Users\\volko\\Desktop\\main\\myProjects\\TritoneProject\\frontend\\frontend-app\\src\\components\\Testing\\Section1\\DiagramConstructor\\ElementsList\\ElementsList.tsx":"43","C:\\Users\\volko\\Desktop\\main\\myProjects\\TritoneProject\\frontend\\frontend-app\\src\\components\\Testing\\Section1\\DiagramConstructor\\DiagramComponentsAndFunctions\\SplitDiagramField.jsx":"44","C:\\Users\\volko\\Desktop\\main\\myProjects\\TritoneProject\\frontend\\frontend-app\\src\\types\\apiTypes.ts":"45","C:\\Users\\volko\\Desktop\\main\\myProjects\\TritoneProject\\frontend\\frontend-app\\src\\redux\\ActionCreators\\TestingActionCreators.ts":"46","C:\\Users\\volko\\Desktop\\main\\myProjects\\TritoneProject\\frontend\\frontend-app\\src\\redux\\ActionCreators\\DiagramActionCreators.ts":"47","C:\\Users\\volko\\Desktop\\main\\myProjects\\TritoneProject\\frontend\\frontend-app\\src\\api\\userApi.ts":"48","C:\\Users\\volko\\Desktop\\main\\myProjects\\TritoneProject\\frontend\\frontend-app\\src\\api\\testingApi.ts":"49","C:\\Users\\volko\\Desktop\\main\\myProjects\\TritoneProject\\frontend\\frontend-app\\src\\redux\\ActionCreators\\HelpActionCreators.ts":"50","C:\\Users\\volko\\Desktop\\main\\myProjects\\TritoneProject\\frontend\\frontend-app\\src\\components\\Testing\\Section3\\CustomComponents\\SuccessDialog.tsx":"51","C:\\Users\\volko\\Desktop\\main\\myProjects\\TritoneProject\\frontend\\frontend-app\\src\\components\\Testing\\Section3\\ViewResultPoints\\ChosenTypes.tsx":"52","C:\\Users\\volko\\Desktop\\main\\myProjects\\TritoneProject\\frontend\\frontend-app\\src\\components\\Testing\\Section3\\CustomComponents\\MaterialSelect.tsx":"53","C:\\Users\\volko\\Desktop\\main\\myProjects\\TritoneProject\\frontend\\frontend-app\\src\\components\\Testing\\Section3\\CustomComponents\\MistakeDialog.tsx":"54","C:\\Users\\volko\\Desktop\\main\\myProjects\\TritoneProject\\frontend\\frontend-app\\src\\components\\Testing\\Section3\\CustomComponents\\CustomTooltip.jsx":"55","C:\\Users\\volko\\Desktop\\main\\myProjects\\TritoneProject\\frontend\\frontend-app\\src\\components\\Testing\\Section1\\DiagramConstructor\\DiagramComponentsAndFunctions\\Field.jsx":"56","C:\\Users\\volko\\Desktop\\main\\myProjects\\TritoneProject\\frontend\\frontend-app\\src\\components\\Testing\\Section1\\DiagramConstructor\\DiagramComponentsAndFunctions\\ConnectionLine.jsx":"57","C:\\Users\\volko\\Desktop\\main\\myProjects\\TritoneProject\\frontend\\frontend-app\\src\\components\\Testing\\Section1\\DiagramConstructor\\DiagramComponentsAndFunctions\\Edge.jsx":"58","C:\\Users\\volko\\Desktop\\main\\myProjects\\TritoneProject\\frontend\\frontend-app\\src\\components\\Testing\\Section1\\DiagramConstructor\\DiagramComponentsAndFunctions\\NodeComponent.jsx":"59","C:\\Users\\volko\\Desktop\\main\\myProjects\\TritoneProject\\frontend\\frontend-app\\src\\components\\Testing\\Section3\\ViewResultPoints\\ViewResultPoints.tsx":"60","C:\\Users\\volko\\Desktop\\main\\myProjects\\TritoneProject\\frontend\\frontend-app\\src\\components\\Testing\\Section3\\CustomComponents\\MaterialTable.tsx":"61","C:\\Users\\volko\\Desktop\\main\\myProjects\\TritoneProject\\frontend\\frontend-app\\src\\components\\Testing\\Section3\\ViewResultTableCalc\\TableCalc.tsx":"62","C:\\Users\\volko\\Desktop\\main\\myProjects\\TritoneProject\\frontend\\frontend-app\\src\\components\\Testing\\Section3\\CustomComponents\\SuccessPointDialog.tsx":"63","C:\\Users\\volko\\Desktop\\main\\myProjects\\TritoneProject\\frontend\\frontend-app\\src\\redux\\reducers\\TestReducers\\test-reducer.ts":"64","C:\\Users\\volko\\Desktop\\main\\myProjects\\TritoneProject\\frontend\\frontend-app\\src\\components\\Testing\\Section2\\Test.tsx":"65","C:\\Users\\volko\\Desktop\\main\\myProjects\\TritoneProject\\frontend\\frontend-app\\src\\components\\Testing\\Section2\\CustomComponents\\Question.tsx":"66","C:\\Users\\volko\\Desktop\\main\\myProjects\\TritoneProject\\frontend\\frontend-app\\src\\components\\Testing\\Section2\\CustomComponents\\GreenRadio.tsx":"67","C:\\Users\\volko\\Desktop\\main\\myProjects\\TritoneProject\\frontend\\frontend-app\\src\\redux\\ActionCreators\\TestActionCreators.ts":"68","C:\\Users\\volko\\Desktop\\main\\myProjects\\TritoneProject\\frontend\\frontend-app\\src\\redux\\selectors\\test-selectors.ts":"69"},{"size":417,"mtime":1621938219759,"results":"70","hashOfConfig":"71"},{"size":1149,"mtime":1622540927766,"results":"72","hashOfConfig":"71"},{"size":2932,"mtime":1622640573103,"results":"73","hashOfConfig":"71"},{"size":576,"mtime":1619960079434,"results":"74","hashOfConfig":"71"},{"size":5667,"mtime":1622640611417,"results":"75","hashOfConfig":"71"},{"size":3071,"mtime":1619960079434,"results":"76","hashOfConfig":"71"},{"size":944,"mtime":1622540773545,"results":"77","hashOfConfig":"71"},{"size":4143,"mtime":1621490426047,"results":"78","hashOfConfig":"71"},{"size":11021,"mtime":1622364210122,"results":"79","hashOfConfig":"71"},{"size":940,"mtime":1619960079418,"results":"80","hashOfConfig":"71"},{"size":1103,"mtime":1619960079434,"results":"81","hashOfConfig":"71"},{"size":310,"mtime":1619960079418,"results":"82","hashOfConfig":"71"},{"size":2849,"mtime":1620889275956,"results":"83","hashOfConfig":"71"},{"size":1165,"mtime":1619960079403,"results":"84","hashOfConfig":"71"},{"size":1105,"mtime":1621509509453,"results":"85","hashOfConfig":"71"},{"size":469,"mtime":1619960079418,"results":"86","hashOfConfig":"71"},{"size":8495,"mtime":1619960079403,"results":"87","hashOfConfig":"71"},{"size":3936,"mtime":1622139421121,"results":"88","hashOfConfig":"71"},{"size":3221,"mtime":1622138502607,"results":"89","hashOfConfig":"71"},{"size":1321,"mtime":1619960079403,"results":"90","hashOfConfig":"71"},{"size":4973,"mtime":1620881363244,"results":"91","hashOfConfig":"71"},{"size":143,"mtime":1620908680993,"results":"92","hashOfConfig":"71"},{"size":8516,"mtime":1622643736649,"results":"93","hashOfConfig":"71"},{"size":2368,"mtime":1622547259549,"results":"94","hashOfConfig":"71"},{"size":298,"mtime":1621742978697,"results":"95","hashOfConfig":"71"},{"size":1813,"mtime":1622203798226,"results":"96","hashOfConfig":"71"},{"size":137,"mtime":1619960079434,"results":"97","hashOfConfig":"71"},{"size":2669,"mtime":1622138147623,"results":"98","hashOfConfig":"71"},{"size":2312,"mtime":1619960079418,"results":"99","hashOfConfig":"71"},{"size":4632,"mtime":1622636816434,"results":"100","hashOfConfig":"71"},{"size":3611,"mtime":1622477591869,"results":"101","hashOfConfig":"71"},{"size":953,"mtime":1619960079403,"results":"102","hashOfConfig":"71"},{"size":4504,"mtime":1622138745809,"results":"103","hashOfConfig":"71"},{"size":5541,"mtime":1622044005199,"results":"104","hashOfConfig":"71"},{"size":4547,"mtime":1622138584482,"results":"105","hashOfConfig":"71"},{"size":878,"mtime":1619960079403,"results":"106","hashOfConfig":"71"},{"size":4135,"mtime":1619960079403,"results":"107","hashOfConfig":"71"},{"size":586,"mtime":1620118458977,"results":"108","hashOfConfig":"71"},{"size":1087,"mtime":1622480397808,"results":"109","hashOfConfig":"71"},{"size":1777,"mtime":1620128347541,"results":"110","hashOfConfig":"71"},{"size":8558,"mtime":1619960079403,"results":"111","hashOfConfig":"71"},{"size":1617,"mtime":1620138008124,"results":"112","hashOfConfig":"71"},{"size":1858,"mtime":1620107553617,"results":"113","hashOfConfig":"71"},{"size":1707,"mtime":1620132552268,"results":"114","hashOfConfig":"71"},{"size":1313,"mtime":1622203984496,"results":"115","hashOfConfig":"71"},{"size":452,"mtime":1622204130255,"results":"116","hashOfConfig":"71"},{"size":1179,"mtime":1620129894939,"results":"117","hashOfConfig":"71"},{"size":1429,"mtime":1619960079371,"results":"118","hashOfConfig":"71"},{"size":4225,"mtime":1622540704638,"results":"119","hashOfConfig":"71"},{"size":165,"mtime":1619960079418,"results":"120","hashOfConfig":"71"},{"size":2234,"mtime":1622047498937,"results":"121","hashOfConfig":"71"},{"size":1346,"mtime":1621936971257,"results":"122","hashOfConfig":"71"},{"size":743,"mtime":1622021209186,"results":"123","hashOfConfig":"71"},{"size":2065,"mtime":1622047501286,"results":"124","hashOfConfig":"71"},{"size":1082,"mtime":1621417110351,"results":"125","hashOfConfig":"71"},{"size":4579,"mtime":1620132569382,"results":"126","hashOfConfig":"71"},{"size":565,"mtime":1620045974170,"results":"127","hashOfConfig":"71"},{"size":698,"mtime":1620045974230,"results":"128","hashOfConfig":"71"},{"size":969,"mtime":1620110316473,"results":"129","hashOfConfig":"71"},{"size":1707,"mtime":1622138060764,"results":"130","hashOfConfig":"71"},{"size":903,"mtime":1622121855395,"results":"131","hashOfConfig":"71"},{"size":3279,"mtime":1622534931155,"results":"132","hashOfConfig":"71"},{"size":2432,"mtime":1622139437804,"results":"133","hashOfConfig":"71"},{"size":659,"mtime":1622636200931,"results":"134","hashOfConfig":"71"},{"size":2002,"mtime":1622640270057,"results":"135","hashOfConfig":"71"},{"size":1923,"mtime":1622641288400,"results":"136","hashOfConfig":"71"},{"size":455,"mtime":1622634638485,"results":"137","hashOfConfig":"71"},{"size":215,"mtime":1622636804441,"results":"138","hashOfConfig":"71"},{"size":217,"mtime":1622636972273,"results":"139","hashOfConfig":"71"},{"filePath":"140","messages":"141","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"142"},"6iym17",{"filePath":"143","messages":"144","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"142"},{"filePath":"145","messages":"146","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"147","messages":"148","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"142"},{"filePath":"149","messages":"150","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"151","messages":"152","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"142"},{"filePath":"153","messages":"154","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"142"},{"filePath":"155","messages":"156","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"142"},{"filePath":"157","messages":"158","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"142"},{"filePath":"159","messages":"160","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"142"},{"filePath":"161","messages":"162","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"142"},{"filePath":"163","messages":"164","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"142"},{"filePath":"165","messages":"166","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"167","usedDeprecatedRules":"142"},{"filePath":"168","messages":"169","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"142"},{"filePath":"170","messages":"171","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"142"},{"filePath":"172","messages":"173","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"142"},{"filePath":"174","messages":"175","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"142"},{"filePath":"176","messages":"177","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"178","usedDeprecatedRules":"142"},{"filePath":"179","messages":"180","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"181","usedDeprecatedRules":"142"},{"filePath":"182","messages":"183","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"142"},{"filePath":"184","messages":"185","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"186"},{"filePath":"187","messages":"188","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"142"},{"filePath":"189","messages":"190","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"191","messages":"192","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"142"},{"filePath":"193","messages":"194","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"142"},{"filePath":"195","messages":"196","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"142"},{"filePath":"197","messages":"198","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"142"},{"filePath":"199","messages":"200","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"142"},{"filePath":"201","messages":"202","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"142"},{"filePath":"203","messages":"204","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"205","messages":"206","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"207","usedDeprecatedRules":"142"},{"filePath":"208","messages":"209","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"142"},{"filePath":"210","messages":"211","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"142"},{"filePath":"212","messages":"213","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"142"},{"filePath":"214","messages":"215","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"216","usedDeprecatedRules":"142"},{"filePath":"217","messages":"218","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"142"},{"filePath":"219","messages":"220","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"142"},{"filePath":"221","messages":"222","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"142"},{"filePath":"223","messages":"224","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"142"},{"filePath":"225","messages":"226","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"142"},{"filePath":"227","messages":"228","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"186"},{"filePath":"229","messages":"230","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"142"},{"filePath":"231","messages":"232","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"142"},{"filePath":"233","messages":"234","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"186"},{"filePath":"235","messages":"236","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"142"},{"filePath":"237","messages":"238","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"142"},{"filePath":"239","messages":"240","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"142"},{"filePath":"241","messages":"242","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"142"},{"filePath":"243","messages":"244","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"142"},{"filePath":"245","messages":"246","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"142"},{"filePath":"247","messages":"248","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"249","usedDeprecatedRules":"142"},{"filePath":"250","messages":"251","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"142"},{"filePath":"252","messages":"253","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"142"},{"filePath":"254","messages":"255","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"256","usedDeprecatedRules":"142"},{"filePath":"257","messages":"258","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"186"},{"filePath":"259","messages":"260","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"261","usedDeprecatedRules":"186"},{"filePath":"262","messages":"263","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"186"},{"filePath":"264","messages":"265","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"186"},{"filePath":"266","messages":"267","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"186"},{"filePath":"268","messages":"269","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"270","usedDeprecatedRules":"142"},{"filePath":"271","messages":"272","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"142"},{"filePath":"273","messages":"274","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":2,"source":"275","usedDeprecatedRules":"142"},{"filePath":"276","messages":"277","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"278","usedDeprecatedRules":"142"},{"filePath":"279","messages":"280","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"281","messages":"282","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"142"},{"filePath":"283","messages":"284","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"285","messages":"286","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"142"},{"filePath":"287","messages":"288","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"289","messages":"290","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Users\\volko\\Desktop\\main\\myProjects\\TritoneProject\\frontend\\frontend-app\\src\\index.tsx",[],["291","292"],"C:\\Users\\volko\\Desktop\\main\\myProjects\\TritoneProject\\frontend\\frontend-app\\src\\redux\\store.ts",[],"C:\\Users\\volko\\Desktop\\main\\myProjects\\TritoneProject\\frontend\\frontend-app\\src\\App.tsx",["293"],"C:\\Users\\volko\\Desktop\\main\\myProjects\\TritoneProject\\frontend\\frontend-app\\src\\redux\\reducers\\help-reducer.ts",[],"C:\\Users\\volko\\Desktop\\main\\myProjects\\TritoneProject\\frontend\\frontend-app\\src\\redux\\reducers\\appData-reducer.ts",[],"C:\\Users\\volko\\Desktop\\main\\myProjects\\TritoneProject\\frontend\\frontend-app\\src\\redux\\reducers\\user-reducer.ts",[],"C:\\Users\\volko\\Desktop\\main\\myProjects\\TritoneProject\\frontend\\frontend-app\\src\\redux\\reducers\\TestReducers\\testing-reducer.ts",[],"C:\\Users\\volko\\Desktop\\main\\myProjects\\TritoneProject\\frontend\\frontend-app\\src\\redux\\reducers\\TestReducers\\diagramElements-reducer.ts",[],"C:\\Users\\volko\\Desktop\\main\\myProjects\\TritoneProject\\frontend\\frontend-app\\src\\redux\\reducers\\TestReducers\\calc-reducer.ts",[],"C:\\Users\\volko\\Desktop\\main\\myProjects\\TritoneProject\\frontend\\frontend-app\\src\\redux\\ActionCreators\\UserActionCreators.ts",[],"C:\\Users\\volko\\Desktop\\main\\myProjects\\TritoneProject\\frontend\\frontend-app\\src\\redux\\selectors\\user-selector.ts",[],"C:\\Users\\volko\\Desktop\\main\\myProjects\\TritoneProject\\frontend\\frontend-app\\src\\hoc\\withSuspense.tsx",[],"C:\\Users\\volko\\Desktop\\main\\myProjects\\TritoneProject\\frontend\\frontend-app\\src\\components\\Auth\\Auth.tsx",["294","295","296","297"],"import React from \"react\";\r\nimport {Form, Formik, FormikValues, useField} from 'formik'\r\nimport * as Yup from 'yup'\r\nimport style from \"./Auth.module.css\"\r\nimport {NavLink, Redirect} from \"react-router-dom\";\r\nimport {LogInUser} from \"../../redux/ThunkCreators/userThunks\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {GetAuthError, GetUserAccessToken, GetUserInfo} from \"../../redux/selectors/user-selector\";\r\n\r\ntype PropsType = {\r\n    setUserInfo: React.Dispatch<React.SetStateAction<any>>\r\n}\r\n\r\ntype ValuesType = {\r\n    login: string;\r\n    password: string;\r\n}\r\n\r\ntype CustomTextInputPropsType = {\r\n    name: string,\r\n    type: string,\r\n    label: string,\r\n    validate?: (value: any) => undefined | string | Promise<any>\r\n}\r\n\r\nconst Auth = () => {\r\n    const authError = useSelector(GetAuthError);\r\n    const dispatch = useDispatch();\r\n\r\n    const initValues: ValuesType = {\r\n        login: '',\r\n        password: ''\r\n    };\r\n\r\n    const authValidateSchema = Yup.object({\r\n        login: Yup.string().required('Обязательное поле'),\r\n        password: Yup.string().required('Обязательное поле')\r\n    });\r\n\r\n    const submit = async (values: FormikValues, actions:any) => {\r\n        await dispatch(LogInUser(values.login, values.password));\r\n        actions.setSubmitting(true);\r\n    }\r\n\r\n    return (\r\n        <Formik\r\n            initialValues={initValues}\r\n            validationSchema={authValidateSchema}\r\n            onSubmit={submit}\r\n        >\r\n            {() => (\r\n                <div className={style.formContainer}>\r\n                    <Form className={style.form}>\r\n                        <p className=\"font_usual-center\">АВТОРИЗАЦИЯ</p>\r\n                        <AuthTextInput name=\"login\" type=\"text\" label=\"Логин\"/>\r\n                        <AuthTextInput name=\"password\" type=\"password\" label=\"Пароль\"/>\r\n                        {authError && <p style={{color: \"red\"}}>{authError}</p>}\r\n                        <button className=\"button_classic\" type=\"submit\">Войти</button>\r\n                        <NavLink to={\"/reg\"}>Нет учетной записи?</NavLink>\r\n                    </Form>\r\n                </div>\r\n            )}\r\n        </Formik>\r\n    )\r\n}\r\n\r\nconst AuthTextInput = (props: CustomTextInputPropsType) => {\r\n    const [field, meta] = useField(props);\r\n\r\n    return (\r\n        <div className={style.inputGroup}>\r\n            <input className={style.inputGroup__input} {...field} {...props}/>\r\n            <label className={style.inputGroup__label} htmlFor={props.name}>{props.label}</label>\r\n            <span className={meta.touched && meta.error ? style.inputGroup__errorVisible : style.inputGroup__errorHidden}\r\n            >\r\n                {meta.error}\r\n            </span>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Auth;","C:\\Users\\volko\\Desktop\\main\\myProjects\\TritoneProject\\frontend\\frontend-app\\src\\components\\Main\\Main.tsx",[],"C:\\Users\\volko\\Desktop\\main\\myProjects\\TritoneProject\\frontend\\frontend-app\\src\\components\\Header\\Header.tsx",[],"C:\\Users\\volko\\Desktop\\main\\myProjects\\TritoneProject\\frontend\\frontend-app\\src\\components\\Testing\\Testing.tsx",[],"C:\\Users\\volko\\Desktop\\main\\myProjects\\TritoneProject\\frontend\\frontend-app\\src\\components\\Registration\\Registration.tsx",[],"C:\\Users\\volko\\Desktop\\main\\myProjects\\TritoneProject\\frontend\\frontend-app\\src\\components\\Testing\\Section3\\ViewResultPoints\\PointTest.tsx",["298","299"],"import React, {useEffect, useState} from \"react\";\r\nimport {useParams} from \"react-router-dom\";\r\nimport style from \"./ViewResultPoints.module.css\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {ClearDataSet} from \"../../../../redux/ActionCreators/CalcActionsCreators\";\r\nimport {GetCurrentPointInfo, GetPointProgress} from \"../../../../redux/selectors/calc-selector\";\r\nimport PointTypesSelection from \"../ViewResultTypes/PointTypesSelection\";\r\nimport ChoseColumns from \"../ViewResultChoseColumns/ChoseColumns\";\r\nimport TableCalc from \"../ViewResultTableCalc/TableCalc\";\r\nimport SuccessPointDialog from \"../CustomComponents/SuccessPointDialog\";\r\n\r\ntype useParamsType = {\r\n    pointId: string\r\n}\r\n\r\ntype CurrentStepType = {\r\n    id: number,\r\n    stepTitle: string,\r\n    isAcoustic?: boolean,\r\n    measureSequence?: Array<number>\r\n    frequency?: Array<number>,\r\n    testValues?: Array<number>,\r\n    signalValues?: Array<number>,\r\n    backValues?: Array<number>,\r\n    delta?: Array<number>,\r\n    isolationValues?: Array<number>,\r\n    isComplete?: boolean,\r\n    rightAcousticSequence?: Array<number>,\r\n    rightVibroSequence?: Array<number>,\r\n} | null\r\n\r\nconst GetStepContent = (stepNumber: number, props: any = null) => {\r\n    if(stepNumber > 0 && stepNumber < 5) {\r\n        switch (stepNumber) {\r\n            case 1:\r\n                return <PointTypesSelection stepNumber={stepNumber}/>\r\n            case 2:\r\n                return <PointTypesSelection stepNumber={stepNumber}/>\r\n            case 3:\r\n                return <ChoseColumns stepNumber={stepNumber}/>\r\n            case 4:\r\n                return <TableCalc stepNumber={stepNumber}/>\r\n        }\r\n    } else {\r\n        return <SuccessPointDialog/> // TODO: Сделать красиво\r\n    }\r\n}\r\n\r\nconst PointTest = () => {\r\n    let {pointId} = useParams<useParamsType>();\r\n    const currentPointInfo = useSelector(GetCurrentPointInfo(parseInt(pointId))); // инфа о констрцкии и о выполнении замеров на ней TODO:УБРАТЬ ЕГО\r\n    const pointProgress = useSelector(GetPointProgress); //инфа о прохождении измерении и расчетов на конструкции\r\n    const [currentStep, setCurrentStep] = useState<CurrentStepType>(null); //инфа о текущем этапе\r\n    const dispatch = useDispatch();\r\n\r\n    //очищаем наборы данных измерений\r\n    useEffect(()=>{\r\n        dispatch(ClearDataSet());\r\n    },[])\r\n\r\n    //изменение текущего шага в локальном стейте\r\n    useEffect(()=>{\r\n        if(pointProgress){\r\n            if(pointProgress.currentStep > 0 && pointProgress.currentStep < 5){\r\n                switch (pointProgress.currentStep){\r\n                    case 1:\r\n                        setCurrentStep(pointProgress.step1);\r\n                        break;\r\n                    case 2:\r\n                        setCurrentStep(pointProgress.step2);\r\n                        break;\r\n                    case 3:\r\n                        setCurrentStep(pointProgress.step3);\r\n                        break;\r\n                    case 4:\r\n                        setCurrentStep(pointProgress.step4);\r\n                        break;\r\n                }\r\n            }\r\n            else{\r\n                pointProgress.isComplete = true;\r\n            }\r\n        }\r\n    },[pointProgress.currentStep])\r\n\r\n    return (\r\n        <div className={style.container}>\r\n            <div className={style.title}>\r\n                <p>{`${currentStep?.stepTitle} ${currentStep?.isAcoustic !== undefined ? currentStep.isAcoustic ? \"звукоизоляции\" : \"виброизоляции\" : \"\"}`}</p>\r\n                <p>Тип конструкции: {currentPointInfo?.pointTitle}.</p>\r\n            </div>\r\n            {GetStepContent(pointProgress.currentStep)}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default PointTest;","C:\\Users\\volko\\Desktop\\main\\myProjects\\TritoneProject\\frontend\\frontend-app\\src\\components\\Testing\\Section3\\ViewResult.tsx",["300","301"],"import React, {useEffect, useState} from \"react\";\r\nimport style from \"./ViewResult.module.css\"\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {GetDataSet} from \"../../../redux/ThunkCreators/testingThunks\";\r\nimport {signalKeys, signalTypes} from \"../../../types/generalTypes\";\r\nimport PanelControl from \"./CustomComponents/PanelControl\";\r\nimport MyBarChar from \"./CustomComponents/CustomBarChar\";\r\nimport {useParams} from \"react-router-dom\";\r\nimport {GetCurrentPointInfo, GetDataSetSelector} from \"../../../redux/selectors/calc-selector\";\r\nimport {ChangeSignalLevel} from \"../../../redux/ActionCreators/CalcActionsCreators\";\r\nimport {\r\n    GetMeasureTypeByIdRussian,\r\n    GetPointNameTranslation\r\n} from \"../../../functions/PointTestFunctions\";\r\n\r\nconst initialCheckBoxState = {\r\n    signalLevelMax: false,\r\n    signalLevel: true,\r\n    signalLevelMin: false\r\n};\r\n\r\ntype useParamsType = {\r\n    pointId: string,\r\n    typeId: string\r\n}\r\n\r\nconst ViewResult = () => {\r\n    let {pointId, typeId} = useParams<useParamsType>()\r\n    const currentPointInfo = useSelector(GetCurrentPointInfo(parseInt(pointId)));\r\n    const dataSet = useSelector(GetDataSetSelector);\r\n    const [currentSignalLevel, setCurrentSignalLevel] = useState(signalKeys.signalLevel);\r\n    const [checkBoxState, setCheckBoxState] = useState(initialCheckBoxState);\r\n\r\n    const myDispatch = useDispatch();\r\n\r\n\r\n    useEffect(()=>{\r\n        if(currentPointInfo){\r\n            let typeName: string = \"\";\r\n            switch(parseInt(typeId)){\r\n                case signalTypes.Test:\r\n                    typeName=\"Test\";\r\n                    break;\r\n                case signalTypes.Signal:{\r\n                    typeName=\"Signal\";\r\n                    break;\r\n                }\r\n                case signalTypes.Back:{\r\n                    typeName=\"Back\";\r\n                    break;\r\n                }\r\n                case signalTypes.SAZ:{\r\n                    typeName=\"SAZ\";\r\n                    break;\r\n                }\r\n            }\r\n\r\n            /Floor|Wall|Ceiling/.test(currentPointInfo.pointName)\r\n                ? myDispatch(GetDataSet(\"FWC\"+typeName))\r\n                : myDispatch(GetDataSet(currentPointInfo.pointName+typeName));\r\n        }\r\n\r\n    },[myDispatch, currentPointInfo])\r\n\r\n    useEffect(()=>{\r\n        const intervalId = setInterval(() => {\r\n            myDispatch(ChangeSignalLevel());\r\n        }, 1500);\r\n\r\n        return () => clearInterval(intervalId);\r\n    },[myDispatch])\r\n\r\n    return(\r\n        <div className={style.viewer_container}>\r\n            <div className={style.viewer_title}>\r\n                <p>{GetMeasureTypeByIdRussian(parseInt(typeId))}</p>\r\n                <p>Тип конструкции: {currentPointInfo?.pointTitle}</p>\r\n            </div>\r\n            <div className={style.viewer_field}>\r\n                <PanelControl\r\n                    checkBoxState = {checkBoxState}\r\n                    setCheckBoxState = {setCheckBoxState}\r\n                    setCurrentSignalLevel = {setCurrentSignalLevel}\r\n                />\r\n                <MyBarChar dataSet={dataSet} currentSignalLevel={currentSignalLevel}/>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ViewResult;","C:\\Users\\volko\\Desktop\\main\\myProjects\\TritoneProject\\frontend\\frontend-app\\src\\components\\Help\\Help.tsx",[],"C:\\Users\\volko\\Desktop\\main\\myProjects\\TritoneProject\\frontend\\frontend-app\\src\\components\\Testing\\Section1\\DiagramConstructor\\DiagramConstructor.jsx",[],["302","303"],"C:\\Users\\volko\\Desktop\\main\\myProjects\\TritoneProject\\frontend\\frontend-app\\src\\functions\\Random.ts",[],"C:\\Users\\volko\\Desktop\\main\\myProjects\\TritoneProject\\frontend\\frontend-app\\src\\functions\\PointTestFunctions.ts",[],"C:\\Users\\volko\\Desktop\\main\\myProjects\\TritoneProject\\frontend\\frontend-app\\src\\types\\generalTypes.ts",[],"C:\\Users\\volko\\Desktop\\main\\myProjects\\TritoneProject\\frontend\\frontend-app\\src\\redux\\selectors\\appData-selector.ts",[],"C:\\Users\\volko\\Desktop\\main\\myProjects\\TritoneProject\\frontend\\frontend-app\\src\\redux\\ActionCreators\\CalcActionsCreators.ts",[],"C:\\Users\\volko\\Desktop\\main\\myProjects\\TritoneProject\\frontend\\frontend-app\\src\\redux\\selectors\\help-selector.ts",[],"C:\\Users\\volko\\Desktop\\main\\myProjects\\TritoneProject\\frontend\\frontend-app\\src\\redux\\selectors\\calc-selector.ts",[],"C:\\Users\\volko\\Desktop\\main\\myProjects\\TritoneProject\\frontend\\frontend-app\\src\\redux\\ThunkCreators\\userThunks.ts",[],"C:\\Users\\volko\\Desktop\\main\\myProjects\\TritoneProject\\frontend\\frontend-app\\src\\redux\\ThunkCreators\\testingThunks.ts",[],"C:\\Users\\volko\\Desktop\\main\\myProjects\\TritoneProject\\frontend\\frontend-app\\src\\components\\Header\\DropMenu.tsx",["304"],"import React from 'react';\r\nimport {withStyles} from '@material-ui/core/styles';\r\nimport Button from '@material-ui/core/Button';\r\nimport Menu, {MenuProps} from '@material-ui/core/Menu';\r\nimport MenuItem from '@material-ui/core/MenuItem';\r\nimport ListItemIcon from '@material-ui/core/ListItemIcon';\r\nimport ListItemText from '@material-ui/core/ListItemText';\r\nimport AppsIcon from '@material-ui/icons/Apps';\r\nimport {NavLink} from \"react-router-dom\";\r\nimport ContactSupportTwoToneIcon from '@material-ui/icons/ContactSupportTwoTone';\r\nimport ExitToAppTwoToneIcon from '@material-ui/icons/ExitToAppTwoTone';\r\nimport SchoolTwoToneIcon from '@material-ui/icons/SchoolTwoTone';\r\n\r\nconst StyledMenu = withStyles({\r\n    paper: {\r\n        border: '1px solid #d3d4d5',\r\n    },\r\n})((props: MenuProps) => (\r\n    <Menu\r\n        elevation={0}\r\n        getContentAnchorEl={null}\r\n        anchorOrigin={{\r\n            vertical: 'bottom',\r\n            horizontal: 'center',\r\n        }}\r\n        transformOrigin={{\r\n            vertical: 'top',\r\n            horizontal: 'center',\r\n        }}\r\n        {...props}\r\n    />\r\n));\r\n\r\nconst StyledMenuItem = withStyles((theme) => ({\r\n    root: {\r\n        '&:focus': {\r\n            '& .MuiListItemIcon-root, & .MuiListItemText-primary': {\r\n                color: theme.palette.common.white,\r\n            },\r\n        },\r\n    },\r\n}))(MenuItem);\r\n\r\nexport default function DropMenu() {\r\n    const [anchorEl, setAnchorEl] = React.useState<null | HTMLElement>(null);\r\n\r\n    const handleClick = (event: React.MouseEvent<HTMLElement>) => {\r\n        setAnchorEl(event.currentTarget);\r\n    };\r\n\r\n    const handleClose = () => {\r\n        setAnchorEl(null);\r\n    };\r\n\r\n    return (\r\n        <div>\r\n            <Button\r\n                style={{backgroundColor: \"#b6fdb6\", borderRadius:\"20px\"}}\r\n                onClick={handleClick}\r\n            >\r\n                <AppsIcon fontSize=\"default\"/>\r\n            </Button>\r\n            <StyledMenu\r\n                id=\"customized-menu\"\r\n                anchorEl={anchorEl}\r\n                keepMounted\r\n                open={Boolean(anchorEl)}\r\n                onClose={handleClose}\r\n            >\r\n                {/*<StyledMenuItem>*/}\r\n                {/*    <ListItemIcon>*/}\r\n                {/*        <SchoolTwoToneIcon style={{ color: \"#8ed78e\" }} fontSize=\"small\"/>*/}\r\n                {/*    </ListItemIcon>*/}\r\n                {/*    <ListItemText>*/}\r\n                {/*        <NavLink to={\"/MyResults\"} style={{textDecoration: \"none\", color: \"black\"}}>Мои*/}\r\n                {/*            результаты</NavLink>*/}\r\n                {/*    </ListItemText>*/}\r\n                {/*</StyledMenuItem>*/}\r\n                <StyledMenuItem>\r\n                    <ListItemIcon>\r\n                        <ContactSupportTwoToneIcon style={{ color: \"#8ed78e\" }} fontSize=\"small\"/>\r\n                    </ListItemIcon>\r\n                    <ListItemText>\r\n                        <NavLink to={\"/help\"} style={{textDecoration: \"none\", color: \"black\"}}>Справочник</NavLink>\r\n                    </ListItemText>\r\n                </StyledMenuItem >\r\n                <StyledMenuItem>\r\n                    <ListItemIcon>\r\n                        <ExitToAppTwoToneIcon style={{ color: \"#8ed78e\" }} fontSize=\"small\"/>\r\n                    </ListItemIcon>\r\n                    <ListItemText>\r\n                        <NavLink to={\"/exit\"} style={{textDecoration: \"none\", color: \"black\"}}>Выйти</NavLink>\r\n                    </ListItemText>\r\n                </StyledMenuItem>\r\n            </StyledMenu>\r\n        </div>\r\n    );\r\n}\r\n","C:\\Users\\volko\\Desktop\\main\\myProjects\\TritoneProject\\frontend\\frontend-app\\src\\components\\Testing\\Section.tsx",[],"C:\\Users\\volko\\Desktop\\main\\myProjects\\TritoneProject\\frontend\\frontend-app\\src\\components\\Testing\\Section3\\CustomComponents\\PanelControl.tsx",[],"C:\\Users\\volko\\Desktop\\main\\myProjects\\TritoneProject\\frontend\\frontend-app\\src\\components\\Testing\\Section3\\ViewResultChoseColumns\\ChoseColumns.tsx",[],"C:\\Users\\volko\\Desktop\\main\\myProjects\\TritoneProject\\frontend\\frontend-app\\src\\components\\Testing\\Section3\\ViewResultTypes\\PointTypesSelection.tsx",["305","306","307","308","309","310"],"import React, {useCallback, useEffect, useState} from \"react\";\r\nimport style from \"../ViewResultPoints/ViewResultPoints.module.css\";\r\nimport {NavLink, Redirect, useHistory, useParams} from \"react-router-dom\";\r\nimport {useDispatch} from \"react-redux\";\r\nimport {SetNextStep, SetStepComplete} from \"../../../../redux/ActionCreators/CalcActionsCreators\";\r\nimport {GetChosenTypes} from \"../../../../functions/PointTestFunctions\";\r\nimport ChosenTypes from \"../ViewResultPoints/ChosenTypes\";\r\nimport SuccessDialog from \"../CustomComponents/SuccessDialog\";\r\nimport MistakeDialog from \"../CustomComponents/MistakeDialog\";\r\n\r\ntype useParamsType = {\r\n    pointId: string\r\n}\r\n\r\nconst PointTypesSelection = (props: any) => {\r\n    let {pointId} = useParams<useParamsType>();\r\n    const history = useHistory();\r\n    const [isFinish, SetIsFinish] = useState<boolean>(false);\r\n    const [isMistake, SetIsMistake] = useState<boolean>(false);\r\n    const [currentMeasures, SetCurrentMeasures] = useState<Array<string>|null>();\r\n    const dispatch = useDispatch();\r\n\r\n    useEffect(()=>{\r\n        SetCurrentMeasures(GetChosenTypes());\r\n    },[GetChosenTypes])\r\n\r\n    const checkStepRight = () => {\r\n        let success = true;\r\n        if(sessionStorage.getItem(\"currentMeasureSequence\")){\r\n            let currentMeasureSequenceArray: Array<number> = JSON.parse(sessionStorage.getItem(\"currentMeasureSequence\")!);\r\n            switch (props.stepNumber){\r\n                case 1:{\r\n                    if(currentMeasureSequenceArray.length !== 4)\r\n                        success = false;\r\n                    break;\r\n                }\r\n                case 2:{\r\n                    if(currentMeasureSequenceArray.length !== 3)\r\n                        success = false;\r\n                    break;\r\n                }\r\n            }\r\n            if(success){\r\n                for(let i=0;i<currentMeasureSequenceArray.length;i++){\r\n                    if(currentMeasureSequenceArray[i] !== i+1){\r\n                        success = false;\r\n                        break;\r\n                    }\r\n                }\r\n            }\r\n        }else{\r\n            success = false;\r\n        }\r\n        if(success){\r\n            sessionStorage.removeItem(\"currentMeasureSequence\");\r\n            SetCurrentMeasures(null);\r\n            SetIsFinish(true);\r\n        }else{\r\n            sessionStorage.removeItem(\"currentMeasureSequence\");\r\n            SetCurrentMeasures(null);\r\n            SetIsMistake(true);\r\n        }\r\n\r\n    }\r\n\r\n    const returnButtonClick = () =>{\r\n        history.push(\"/testing/viewPoints\");\r\n    }\r\n\r\n    return (\r\n        isFinish? <SuccessDialog stepNumber={props.stepNumber} SetIsFinish={SetIsFinish}/>\r\n        : isMistake ? <MistakeDialog SetIsMistake={SetIsMistake}/>\r\n        :<>\r\n            <button className={style.historyBackButton} onClick={returnButtonClick}>Вернуться к выбору конструкции</button>\r\n            <div className={style.pointSelectionContainer}>\r\n                <ChosenTypes\r\n                    currentMeasures={currentMeasures}\r\n                    SetCurrentMeasures={SetCurrentMeasures}\r\n                />\r\n                <div className={style.pointSelectionContent}>\r\n                    <div className={style.pointSelectionGrid}>\r\n                        <div id= \"1\" className={style.grid_types}>\r\n                            <NavLink to={\"/testing/viewPoints/Point/\"+pointId+\"/Measure/1\"}>Измерение тест-сигнала</NavLink>\r\n                        </div>\r\n                        <div id= \"2\" className={style.grid_types}>\r\n                            <NavLink to={\"/testing/viewPoints/Point/\"+pointId+\"/Measure/2\"}>Измерение информативного сигнала и фона</NavLink>\r\n                        </div>\r\n                        <div id= \"3\" className={style.grid_types}>\r\n                            <NavLink to={\"/testing/viewPoints/Point/\"+pointId+\"/Measure/3\"}>Измерение фона</NavLink>\r\n                        </div>\r\n                        <div id= \"4\" className={style.grid_types}>\r\n                            <NavLink to={\"/testing/viewPoints/Point/\"+pointId+\"/Measure/4\"}>Измерение помехи</NavLink>\r\n                        </div>\r\n                    </div>\r\n                    <button className=\"button_classic\" onClick={checkStepRight}>Завершить выполнения этапа</button>\r\n                </div>\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default PointTypesSelection;","C:\\Users\\volko\\Desktop\\main\\myProjects\\TritoneProject\\frontend\\frontend-app\\src\\components\\Help\\HelpArticleList\\ArticleList.tsx",[],"C:\\Users\\volko\\Desktop\\main\\myProjects\\TritoneProject\\frontend\\frontend-app\\src\\components\\Help\\HelpArticles\\GeneralArticle.tsx",[],"C:\\Users\\volko\\Desktop\\main\\myProjects\\TritoneProject\\frontend\\frontend-app\\src\\redux\\selectors\\diagram-selector.ts",[],"C:\\Users\\volko\\Desktop\\main\\myProjects\\TritoneProject\\frontend\\frontend-app\\src\\components\\Testing\\Section3\\CustomComponents\\CustomBarChar.tsx",[],"C:\\Users\\volko\\Desktop\\main\\myProjects\\TritoneProject\\frontend\\frontend-app\\src\\components\\Testing\\Section1\\DiagramConstructor\\DiagramComponentsAndFunctions\\HelpFunctions.ts",[],"C:\\Users\\volko\\Desktop\\main\\myProjects\\TritoneProject\\frontend\\frontend-app\\src\\components\\Help\\HelpArticles\\EquipmentArticle.jsx",[],"C:\\Users\\volko\\Desktop\\main\\myProjects\\TritoneProject\\frontend\\frontend-app\\src\\components\\Testing\\Section1\\DiagramConstructor\\DiagramComponentsAndFunctions\\DiagramField.tsx",[],"C:\\Users\\volko\\Desktop\\main\\myProjects\\TritoneProject\\frontend\\frontend-app\\src\\components\\Testing\\Section1\\DiagramConstructor\\ElementsList\\ElementsList.tsx",[],"C:\\Users\\volko\\Desktop\\main\\myProjects\\TritoneProject\\frontend\\frontend-app\\src\\components\\Testing\\Section1\\DiagramConstructor\\DiagramComponentsAndFunctions\\SplitDiagramField.jsx",[],"C:\\Users\\volko\\Desktop\\main\\myProjects\\TritoneProject\\frontend\\frontend-app\\src\\types\\apiTypes.ts",[],"C:\\Users\\volko\\Desktop\\main\\myProjects\\TritoneProject\\frontend\\frontend-app\\src\\redux\\ActionCreators\\TestingActionCreators.ts",[],"C:\\Users\\volko\\Desktop\\main\\myProjects\\TritoneProject\\frontend\\frontend-app\\src\\redux\\ActionCreators\\DiagramActionCreators.ts",[],"C:\\Users\\volko\\Desktop\\main\\myProjects\\TritoneProject\\frontend\\frontend-app\\src\\api\\userApi.ts",[],"C:\\Users\\volko\\Desktop\\main\\myProjects\\TritoneProject\\frontend\\frontend-app\\src\\api\\testingApi.ts",[],"C:\\Users\\volko\\Desktop\\main\\myProjects\\TritoneProject\\frontend\\frontend-app\\src\\redux\\ActionCreators\\HelpActionCreators.ts",[],"C:\\Users\\volko\\Desktop\\main\\myProjects\\TritoneProject\\frontend\\frontend-app\\src\\components\\Testing\\Section3\\CustomComponents\\SuccessDialog.tsx",["311"],"import React from 'react';\r\nimport Dialog from '@material-ui/core/Dialog';\r\nimport DialogActions from '@material-ui/core/DialogActions';\r\nimport Slide from '@material-ui/core/Slide';\r\nimport { TransitionProps } from '@material-ui/core/transitions';\r\nimport {useDispatch} from \"react-redux\";\r\nimport {SetNextStep, SetStepComplete} from \"../../../../redux/ActionCreators/CalcActionsCreators\";\r\nimport style from \"../ViewResult.module.css\"\r\nimport CheckCircleTwoToneIcon from '@material-ui/icons/CheckCircleTwoTone';\r\nimport {formatAngleOfSector} from \"recharts/types/util/PolarUtils\";\r\n\r\nconst Transition = React.forwardRef(function Transition(\r\n    props: TransitionProps & { children?: React.ReactElement<any, any> },\r\n    ref: React.Ref<unknown>,\r\n) {\r\n    return <Slide direction=\"up\" ref={ref} {...props} />;\r\n});\r\n\r\nconst SuccessDialog = (props: {stepNumber: number, SetIsFinish: React.Dispatch<React.SetStateAction<boolean>>}) => {\r\n    const [open, setOpen] = React.useState(true);\r\n    const dispatch = useDispatch();\r\n\r\n    const OnFinishButtonHandler = () => {\r\n        setOpen(false);\r\n        props.SetIsFinish(false);\r\n        dispatch(SetStepComplete(props.stepNumber));\r\n        dispatch(SetNextStep());\r\n    };\r\n\r\n    return (\r\n        <div>\r\n            <Dialog\r\n                open={open}\r\n                TransitionComponent={Transition}\r\n                keepMounted\r\n                className={style.dialog}\r\n                style={{ color: \"#e8ffe8\"}}\r\n            >\r\n                <h2>\r\n                    <CheckCircleTwoToneIcon style={{ color: \"#8ed78e\"}} fontSize=\"default\"/>\r\n                    {\"Этап пройден успешно!\"}\r\n                </h2>\r\n                <p>\r\n                    Для того чтобы перейти на следующий этап, нажмите на конпку \"К следующему этапу\".\r\n                </p>\r\n                <DialogActions>\r\n                    <button onClick={OnFinishButtonHandler} className=\"button_classic\">\r\n                        К следующему этапу\r\n                    </button>\r\n                </DialogActions>\r\n            </Dialog>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default SuccessDialog;\r\n","C:\\Users\\volko\\Desktop\\main\\myProjects\\TritoneProject\\frontend\\frontend-app\\src\\components\\Testing\\Section3\\ViewResultPoints\\ChosenTypes.tsx",[],"C:\\Users\\volko\\Desktop\\main\\myProjects\\TritoneProject\\frontend\\frontend-app\\src\\components\\Testing\\Section3\\CustomComponents\\MaterialSelect.tsx",[],"C:\\Users\\volko\\Desktop\\main\\myProjects\\TritoneProject\\frontend\\frontend-app\\src\\components\\Testing\\Section3\\CustomComponents\\MistakeDialog.tsx",["312"],"import React from 'react';\r\nimport Dialog from '@material-ui/core/Dialog';\r\nimport DialogActions from '@material-ui/core/DialogActions';\r\nimport Slide from '@material-ui/core/Slide';\r\nimport { TransitionProps } from '@material-ui/core/transitions';\r\nimport {useDispatch} from \"react-redux\";\r\nimport style from \"../ViewResult.module.css\"\r\nimport ErrorTwoToneIcon from '@material-ui/icons/ErrorTwoTone';\r\n\r\nconst Transition = React.forwardRef(function Transition(\r\n    props: TransitionProps & { children?: React.ReactElement<any, any> },\r\n    ref: React.Ref<unknown>,\r\n) {\r\n    return <Slide direction=\"up\" ref={ref} {...props} />;\r\n});\r\n\r\nconst MistakeDialog = (props: {SetIsMistake: React.Dispatch<React.SetStateAction<boolean>>}) => {\r\n    const [open, setOpen] = React.useState(true);\r\n\r\n    const OnFinishButtonHandler = () => {\r\n        setOpen(false);\r\n        props.SetIsMistake(false)\r\n    };\r\n\r\n    return (\r\n        <div className={style.dialogSuccess}>\r\n            <Dialog\r\n                open={open}\r\n                TransitionComponent={Transition}\r\n                keepMounted\r\n                className={style.dialog}\r\n                style={{ color: \"#ffdede\"}}\r\n            >\r\n                <h2>\r\n                    <ErrorTwoToneIcon style={{ color: \"#ff6363\"}} fontSize=\"default\"/>\r\n                    {\"Ошибка при прохождении этапа\"}\r\n                </h2>\r\n                <p>\r\n                    Чтобы перейти на следующий этап, необходимо выполнить текущий.\r\n                    Для повторного прохождения нажмите на конпку \"Пройти этап сначала\".\r\n                </p>\r\n                <DialogActions>\r\n                    <button onClick={OnFinishButtonHandler} className=\"button_classic\">\r\n                        Пройти этап сначала\r\n                    </button>\r\n                </DialogActions>\r\n            </Dialog>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default MistakeDialog;\r\n","C:\\Users\\volko\\Desktop\\main\\myProjects\\TritoneProject\\frontend\\frontend-app\\src\\components\\Testing\\Section3\\CustomComponents\\CustomTooltip.jsx",[],"C:\\Users\\volko\\Desktop\\main\\myProjects\\TritoneProject\\frontend\\frontend-app\\src\\components\\Testing\\Section1\\DiagramConstructor\\DiagramComponentsAndFunctions\\Field.jsx",["313"],"import ReactFlow, {addEdge, Controls, isEdge, ReactFlowProvider, removeElements} from \"react-flow-renderer\";\r\n\r\nimport {\r\n    AddElementOnField,\r\n    DeleteElementFromField, RefreshElementsList, SetSAZOn,\r\n} from \"../../../../../redux/ActionCreators/DiagramActionCreators\";\r\n\r\nimport React, {useEffect, useRef, useState} from \"react\";\r\nimport {useDispatch} from \"react-redux\";\r\nimport myStyle from \"../DiagramConstructor.module.css\";\r\nimport NodeComponent from \"./NodeComponent\";\r\nimport Edge from \"./Edge\";\r\nimport ConnectionLine from \"./ConnectionLine\";\r\nimport {RemoveConnections} from \"./HelpFunctions\";\r\n\r\nconst Filed = (props) => {\r\n    const reactFlowWrapper = useRef(null);\r\n    const [reactFlowInstance, setReactFlowInstance] = useState(null);\r\n    const [elements, setElements] = useState([]);\r\n    const dispatch = useDispatch();\r\n\r\n    useEffect(()=> {\r\n        props.setResultElements(elements);\r\n    },[elements, props]);\r\n\r\n    useEffect(()=>{\r\n        if(props.needCleanField){\r\n            setElements([]);\r\n            dispatch(RefreshElementsList());\r\n            props.setNeedClean(false);\r\n        }\r\n    },[props.needCleanField])\r\n\r\n    const isValidConnection = (connection) => {\r\n        for (let i = 0; i < props.connections.length; i++) {\r\n            let handle = props.connections[i].split('-');\r\n            if (handle[0].substring(0, 1) === connection.target || handle[0].substring(0, 1) === connection.source)\r\n                return false;\r\n            if (handle[1].substring(0, 1) === connection.target || handle[0].substring(0, 1) === connection.source)\r\n                return false;\r\n        }\r\n        return true;\r\n    }\r\n\r\n    const onConnect = (params) => {\r\n        let paramsCopy = {\r\n            ...params,\r\n            id: `${params.source}${params.sourceHandle}-${params.target}${params.targetHandle}`,\r\n            type: 'custom'\r\n        };\r\n\r\n        props.setConnection(connections => [...connections, paramsCopy.id]);\r\n        setElements((els) => addEdge(paramsCopy, els));\r\n    };\r\n\r\n    const onElementsRemove = (elementsToRemove) => {\r\n        let connectionsToRemove = [];\r\n\r\n        elementsToRemove.forEach(el => {\r\n            isEdge(el) ? connectionsToRemove.push(el.id)\r\n                : dispatch(DeleteElementFromField(parseInt(el.id)));\r\n        })\r\n\r\n        props.setConnection(RemoveConnections(props.connections, connectionsToRemove));\r\n        setElements((els) => removeElements(elementsToRemove, els));\r\n    }\r\n\r\n    const onLoad = (_reactFlowInstance) =>\r\n        setReactFlowInstance(_reactFlowInstance);\r\n\r\n    const onDragOver = (event) => {\r\n        event.preventDefault();\r\n        event.dataTransfer.dropEffect = 'move';\r\n    };\r\n\r\n    const onDrop = (event) => {\r\n        event.preventDefault();\r\n        const reactFlowBounds = reactFlowWrapper.current.getBoundingClientRect();\r\n        const [id, image, name, text] = event.dataTransfer.getData('text/plain').split('|');\r\n        const position = reactFlowInstance.project({\r\n            x: event.clientX - reactFlowBounds.left,\r\n            y: event.clientY - reactFlowBounds.top,\r\n        });\r\n        const newNode = {\r\n            id: id,\r\n            type: 'special',\r\n            position,\r\n            data: {label: `${name}`, img: image, text: text, isValidConnection: isValidConnection},\r\n        };\r\n\r\n        if(id===\"19\")\r\n            dispatch(SetSAZOn());\r\n\r\n        setElements((es) => es.concat(newNode));\r\n        props.setResultElements(elements);\r\n        dispatch(AddElementOnField(parseInt(id)));\r\n    };\r\n\r\n    return (\r\n        <div id=\"schema_field\" className={`${myStyle.constructor_field} ${props.smallField && myStyle.small_constructor_field}`}>\r\n            <ReactFlowProvider>\r\n                <div style={props.smallField ? {height: '70vh', width: '33.3vw'} : {height: '70vh', width: '70vw'}} ref={reactFlowWrapper}>\r\n                    <ReactFlow\r\n                        elements={elements}\r\n                        onConnect={onConnect}\r\n                        onElementsRemove={onElementsRemove}\r\n                        onLoad={onLoad}\r\n                        onDrop={onDrop}\r\n                        onDragOver={onDragOver}\r\n                        nodeTypes={{special: NodeComponent}}\r\n                        edgeTypes={{custom: Edge}}\r\n                        connectionLineComponent={ConnectionLine}\r\n                    >\r\n                        <Controls/>\r\n                    </ReactFlow>\r\n                </div>\r\n            </ReactFlowProvider>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Filed;\r\n\r\n","C:\\Users\\volko\\Desktop\\main\\myProjects\\TritoneProject\\frontend\\frontend-app\\src\\components\\Testing\\Section1\\DiagramConstructor\\DiagramComponentsAndFunctions\\ConnectionLine.jsx",[],"C:\\Users\\volko\\Desktop\\main\\myProjects\\TritoneProject\\frontend\\frontend-app\\src\\components\\Testing\\Section1\\DiagramConstructor\\DiagramComponentsAndFunctions\\Edge.jsx",[],"C:\\Users\\volko\\Desktop\\main\\myProjects\\TritoneProject\\frontend\\frontend-app\\src\\components\\Testing\\Section1\\DiagramConstructor\\DiagramComponentsAndFunctions\\NodeComponent.jsx",[],"C:\\Users\\volko\\Desktop\\main\\myProjects\\TritoneProject\\frontend\\frontend-app\\src\\components\\Testing\\Section3\\ViewResultPoints\\ViewResultPoints.tsx",["314"],"import React, {useEffect} from \"react\";\r\nimport {NavLink} from \"react-router-dom\";\r\nimport style from \"./ViewResultPoints.module.css\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {ResetProgress, ResetSignalValuesToStep4} from \"../../../../redux/ActionCreators/CalcActionsCreators\";\r\nimport {GetPointsInfo} from \"../../../../redux/selectors/calc-selector\";\r\nimport {GetSummaryPointsProgress} from \"../../../../redux/ThunkCreators/testingThunks\";\r\n\r\nconst ViewResultPoints = () => {\r\n    const pointsInfo = useSelector(GetPointsInfo);\r\n    const dispatch = useDispatch();\r\n\r\n    useEffect(() => {\r\n        dispatch(GetSummaryPointsProgress());\r\n        dispatch(ResetProgress());\r\n        dispatch(ResetSignalValuesToStep4());\r\n        sessionStorage.getItem(\"currentMeasureSequence\") && sessionStorage.removeItem(\"currentMeasureSequence\");\r\n    }, [])\r\n\r\n    return (\r\n        <div className={style.container}>\r\n            <div className={style.title}>\r\n                <h1>ПРОВЕДЕНИЕ ИЗМЕРЕНИЙ</h1>\r\n                <p>Выберете конструкцию для измерений</p>\r\n            </div>\r\n            <div className={style.grid}>\r\n                {pointsInfo?.map(el => <div className={style.grid_elem}>\r\n                    <NavLink\r\n                        to={`/testing/viewPoints/Point/${el.id}`}\r\n                        className={`${el.isComplete?style.grid_elem_complete : style.grid_elem_notComplete}`}\r\n                    >\r\n                        {el.pointTitle.toUpperCase()}\r\n                    </NavLink>\r\n                </div>)\r\n                }\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ViewResultPoints;","C:\\Users\\volko\\Desktop\\main\\myProjects\\TritoneProject\\frontend\\frontend-app\\src\\components\\Testing\\Section3\\CustomComponents\\MaterialTable.tsx",[],"C:\\Users\\volko\\Desktop\\main\\myProjects\\TritoneProject\\frontend\\frontend-app\\src\\components\\Testing\\Section3\\ViewResultTableCalc\\TableCalc.tsx",["315","316"],"import React, {useCallback, useMemo, useState} from \"react\";\r\nimport style from \"./TableCalc.module.css\"\r\nimport MaterialTable from \"../CustomComponents/MaterialTable\";\r\nimport {useSelector} from \"react-redux\";\r\nimport {GetSelectedVariables} from \"../../../../redux/selectors/calc-selector\";\r\nimport {GridColumns, GridEditCellPropsParams, GridRowsProp} from \"@material-ui/data-grid\";\r\nimport {VariableWithValuesType} from \"../../../../types/generalTypes\";\r\nimport {CheckCalculations, CreateTableColumns, CreateTableRows} from \"../../../../functions/PointTestFunctions\";\r\nimport SuccessDialog from \"../CustomComponents/SuccessDialog\";\r\nimport MistakeDialog from \"../CustomComponents/MistakeDialog\";\r\n\r\nconst TableCalc = (props: { stepNumber: number }) => {\r\n    const variables: VariableWithValuesType[] = useSelector(GetSelectedVariables);\r\n    const [isAutoFill, SetAutoFill] = useState<boolean>(false);\r\n    const [isFinish, SetIsFinish] = useState<boolean>(false);\r\n    const [isMistake, SetIsMistake] = useState<boolean>(false);\r\n    const tableColumns: GridColumns = useMemo(() => CreateTableColumns(variables), [variables]);\r\n    const tableRows: GridRowsProp = useMemo(() => CreateTableRows(variables, isAutoFill), [variables, isAutoFill]);\r\n    const [calculatedVariables, SetCalculatedVariables] = useState<{ [p: string]: Array<number> }>({\r\n        delta: new Array<number>(11).fill(0, 0, 11),\r\n        isolationValues: new Array<number>(11).fill(0, 0, 11)\r\n    });\r\n\r\n    const WriteValueFromTable = useCallback((valueData: GridEditCellPropsParams) => {\r\n        console.log(valueData);\r\n        SetCalculatedVariables(prevSate => {\r\n            let values = [...prevSate[valueData.field as string]];\r\n            values.splice((valueData.id as number) - 1, 1, valueData.props.value as number);\r\n\r\n            return {...prevSate, [valueData.field as string]: [...values]}\r\n        });\r\n    }, []);\r\n\r\n    const OnCheckButtonHandler = () => {\r\n        CheckCalculations(variables, calculatedVariables) ? SetIsFinish(true) : SetIsMistake(true);\r\n    }\r\n\r\n    const OnFillAnswersButtonHandler = () => {\r\n        let rightDelta: Array<number> = variables.find(el => el.valuesName === \"delta\")!.values;\r\n        let rightIsolationValues: Array<number> = variables.find(el => el.valuesName === \"isolationValues\")!.values;\r\n        SetCalculatedVariables(calculatedVariables => {\r\n            return {\r\n                ...calculatedVariables,\r\n                [\"delta\"]: rightDelta,\r\n                [\"isolationValues\"]: rightIsolationValues,\r\n            }\r\n        });\r\n        SetAutoFill(true);\r\n    }\r\n\r\n    return (\r\n        isFinish ? <SuccessDialog stepNumber={props.stepNumber} SetIsFinish={SetIsFinish}/>\r\n            : isMistake ? <MistakeDialog SetIsMistake={SetIsMistake}/>\r\n            :<div className={style.TableContainer}>\r\n                <MaterialTable tableColumns={tableColumns} tableRows={tableRows} WriteValueFromTable={WriteValueFromTable}/>\r\n                <button className=\"button_classic\" onClick={OnCheckButtonHandler}>Завершить этап</button>\r\n                <button className=\"button_classic\" onClick={OnFillAnswersButtonHandler}>Заполнить ответы</button>\r\n            </div>\r\n    )\r\n}\r\n\r\nexport default TableCalc;","C:\\Users\\volko\\Desktop\\main\\myProjects\\TritoneProject\\frontend\\frontend-app\\src\\components\\Testing\\Section3\\CustomComponents\\SuccessPointDialog.tsx",["317","318"],"import React from 'react';\r\nimport Dialog from '@material-ui/core/Dialog';\r\nimport DialogActions from '@material-ui/core/DialogActions';\r\nimport Slide from '@material-ui/core/Slide';\r\nimport { TransitionProps } from '@material-ui/core/transitions';\r\nimport {useDispatch} from \"react-redux\";\r\nimport {SetNextStep, SetStepComplete} from \"../../../../redux/ActionCreators/CalcActionsCreators\";\r\nimport style from \"../ViewResult.module.css\"\r\nimport CheckCircleTwoToneIcon from '@material-ui/icons/CheckCircleTwoTone';\r\nimport {useHistory, useParams} from \"react-router-dom\";\r\nimport {SavePointProgress} from \"../../../../redux/ThunkCreators/testingThunks\";\r\n\r\nconst Transition = React.forwardRef(function Transition(\r\n    props: TransitionProps & { children?: React.ReactElement<any, any> },\r\n    ref: React.Ref<unknown>,\r\n) {\r\n    return <Slide direction=\"up\" ref={ref} {...props} />;\r\n});\r\n\r\ntype useParamsType = {\r\n    pointId: string,\r\n}\r\n\r\nconst SuccessPointDialog = () => {\r\n    const [open, setOpen] = React.useState(true);\r\n    const history = useHistory();\r\n    let {pointId} = useParams<useParamsType>();\r\n\r\n    const dispatch = useDispatch();\r\n\r\n    const OnFinishButtonHandler = async () => {\r\n        await dispatch(SavePointProgress(parseInt(pointId)));\r\n        setOpen(false);\r\n        history.push(\"/testing/viewPoints\");\r\n    };\r\n\r\n    return (\r\n        <div>\r\n            <Dialog\r\n                open={open}\r\n                TransitionComponent={Transition}\r\n                keepMounted\r\n                className={style.dialog}\r\n                style={{ color: \"#e8ffe8\"}}\r\n            >\r\n                <h2>\r\n                    <CheckCircleTwoToneIcon style={{ color: \"#8ed78e\"}} fontSize=\"default\"/>\r\n                    {\"Замеры и расчеты на данной конструции завершены успешно!\"}\r\n                </h2>\r\n                <p>\r\n                    Для того чтобы выбрать другую конструкцию, нажмите на конпку \"К выбору конструкции\".\r\n                </p>\r\n                <DialogActions>\r\n                    <button onClick={OnFinishButtonHandler} className=\"button_classic\">\r\n                        К выбору конструкции\r\n                    </button>\r\n                </DialogActions>\r\n            </Dialog>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default SuccessPointDialog;\r\n","C:\\Users\\volko\\Desktop\\main\\myProjects\\TritoneProject\\frontend\\frontend-app\\src\\redux\\reducers\\TestReducers\\test-reducer.ts",[],"C:\\Users\\volko\\Desktop\\main\\myProjects\\TritoneProject\\frontend\\frontend-app\\src\\components\\Testing\\Section2\\Test.tsx",[],"C:\\Users\\volko\\Desktop\\main\\myProjects\\TritoneProject\\frontend\\frontend-app\\src\\components\\Testing\\Section2\\CustomComponents\\Question.tsx",["319","320","321"],"C:\\Users\\volko\\Desktop\\main\\myProjects\\TritoneProject\\frontend\\frontend-app\\src\\components\\Testing\\Section2\\CustomComponents\\GreenRadio.tsx",[],"C:\\Users\\volko\\Desktop\\main\\myProjects\\TritoneProject\\frontend\\frontend-app\\src\\redux\\ActionCreators\\TestActionCreators.ts",[],"C:\\Users\\volko\\Desktop\\main\\myProjects\\TritoneProject\\frontend\\frontend-app\\src\\redux\\selectors\\test-selectors.ts",[],{"ruleId":"322","replacedBy":"323"},{"ruleId":"324","replacedBy":"325"},{"ruleId":"326","severity":1,"message":"327","line":16,"column":8,"nodeType":"328","messageId":"329","endLine":16,"endColumn":20},{"ruleId":"326","severity":1,"message":"330","line":5,"column":18,"nodeType":"328","messageId":"329","endLine":5,"endColumn":26},{"ruleId":"326","severity":1,"message":"331","line":8,"column":23,"nodeType":"328","messageId":"329","endLine":8,"endColumn":41},{"ruleId":"326","severity":1,"message":"332","line":8,"column":43,"nodeType":"328","messageId":"329","endLine":8,"endColumn":54},{"ruleId":"326","severity":1,"message":"333","line":10,"column":6,"nodeType":"328","messageId":"329","endLine":10,"endColumn":15},{"ruleId":"334","severity":1,"message":"335","line":59,"column":7,"nodeType":"336","endLine":59,"endColumn":9,"suggestions":"337"},{"ruleId":"334","severity":1,"message":"338","line":84,"column":7,"nodeType":"336","endLine":84,"endColumn":34,"suggestions":"339"},{"ruleId":"326","severity":1,"message":"340","line":13,"column":5,"nodeType":"328","messageId":"329","endLine":13,"endColumn":28},{"ruleId":"334","severity":1,"message":"341","line":63,"column":7,"nodeType":"336","endLine":63,"endColumn":37,"suggestions":"342"},{"ruleId":"322","replacedBy":"323"},{"ruleId":"324","replacedBy":"325"},{"ruleId":"326","severity":1,"message":"343","line":12,"column":8,"nodeType":"328","messageId":"329","endLine":12,"endColumn":25},{"ruleId":"326","severity":1,"message":"344","line":1,"column":16,"nodeType":"328","messageId":"329","endLine":1,"endColumn":27},{"ruleId":"326","severity":1,"message":"330","line":3,"column":18,"nodeType":"328","messageId":"329","endLine":3,"endColumn":26},{"ruleId":"326","severity":1,"message":"345","line":5,"column":9,"nodeType":"328","messageId":"329","endLine":5,"endColumn":20},{"ruleId":"326","severity":1,"message":"346","line":5,"column":22,"nodeType":"328","messageId":"329","endLine":5,"endColumn":37},{"ruleId":"326","severity":1,"message":"347","line":21,"column":11,"nodeType":"328","messageId":"329","endLine":21,"endColumn":19},{"ruleId":"334","severity":1,"message":"348","line":25,"column":7,"nodeType":"336","endLine":25,"endColumn":23,"suggestions":"349"},{"ruleId":"326","severity":1,"message":"350","line":10,"column":9,"nodeType":"328","messageId":"329","endLine":10,"endColumn":28},{"ruleId":"326","severity":1,"message":"351","line":6,"column":9,"nodeType":"328","messageId":"329","endLine":6,"endColumn":20},{"ruleId":"334","severity":1,"message":"352","line":32,"column":7,"nodeType":"336","endLine":32,"endColumn":29,"suggestions":"353"},{"ruleId":"334","severity":1,"message":"335","line":18,"column":8,"nodeType":"336","endLine":18,"endColumn":10,"suggestions":"354"},{"ruleId":"355","severity":1,"message":"356","line":44,"column":17,"nodeType":"357","messageId":"358","endLine":44,"endColumn":38,"fix":"359"},{"ruleId":"355","severity":1,"message":"360","line":45,"column":17,"nodeType":"357","messageId":"358","endLine":45,"endColumn":58,"fix":"361"},{"ruleId":"326","severity":1,"message":"345","line":7,"column":9,"nodeType":"328","messageId":"329","endLine":7,"endColumn":20},{"ruleId":"326","severity":1,"message":"346","line":7,"column":22,"nodeType":"328","messageId":"329","endLine":7,"endColumn":37},{"ruleId":"334","severity":1,"message":"362","line":19,"column":7,"nodeType":"336","endLine":19,"endColumn":9,"suggestions":"363"},{"ruleId":"334","severity":1,"message":"364","line":24,"column":7,"nodeType":"336","endLine":24,"endColumn":50,"suggestions":"365"},{"ruleId":"334","severity":1,"message":"366","line":24,"column":8,"nodeType":"367","endLine":24,"endColumn":49},"no-native-reassign",["368"],"no-negated-in-lhs",["369"],"@typescript-eslint/no-unused-vars","'ChoseColumns' is defined but never used.","Identifier","unusedVar","'Redirect' is defined but never used.","'GetUserAccessToken' is defined but never used.","'GetUserInfo' is defined but never used.","'PropsType' is defined but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'dispatch'. Either include it or remove the dependency array.","ArrayExpression",["370"],"React Hook useEffect has a missing dependency: 'pointProgress'. Either include it or remove the dependency array.",["371"],"'GetPointNameTranslation' is defined but never used.","React Hook useEffect has a missing dependency: 'typeId'. Either include it or remove the dependency array.",["372"],"'SchoolTwoToneIcon' is defined but never used.","'useCallback' is defined but never used.","'SetNextStep' is defined but never used.","'SetStepComplete' is defined but never used.","'dispatch' is assigned a value but never used.","React Hook useEffect has an unnecessary dependency: 'GetChosenTypes'. Either exclude it or remove the dependency array. Outer scope values like 'GetChosenTypes' aren't valid dependencies because mutating them doesn't re-render the component.",["373"],"'formatAngleOfSector' is defined but never used.","'useDispatch' is defined but never used.","React Hook useEffect has missing dependencies: 'dispatch' and 'props'. Either include them or remove the dependency array. However, 'props' will change when *any* prop changes, so the preferred fix is to destructure the 'props' object outside of the useEffect call and refer to those specific props inside useEffect.",["374"],["375"],"no-useless-computed-key","Unnecessarily computed property [\"delta\"] found.","Property","unnecessarilyComputedProperty",{"range":"376","text":"377"},"Unnecessarily computed property [\"isolationValues\"] found.",{"range":"378","text":"379"},"React Hook useEffect has missing dependencies: 'props' and 'value'. Either include them or remove the dependency array. However, 'props' will change when *any* prop changes, so the preferred fix is to destructure the 'props' object outside of the useEffect call and refer to those specific props inside useEffect.",["380"],"React Hook useEffect has a missing dependency: 'props'. Either include it or remove the dependency array. However, 'props' will change when *any* prop changes, so the preferred fix is to destructure the 'props' object outside of the useEffect call and refer to those specific props inside useEffect.",["381"],"React Hook useEffect has a complex expression in the dependency array. Extract it to a separate variable so it can be statically checked.","MemberExpression","no-global-assign","no-unsafe-negation",{"desc":"382","fix":"383"},{"desc":"384","fix":"385"},{"desc":"386","fix":"387"},{"desc":"388","fix":"389"},{"desc":"390","fix":"391"},{"desc":"382","fix":"392"},[2465,2474],"\"delta\"",[2505,2524],"\"isolationValues\"",{"desc":"393","fix":"394"},{"desc":"395","fix":"396"},"Update the dependencies array to be: [dispatch]",{"range":"397","text":"398"},"Update the dependencies array to be: [pointProgress, pointProgress.currentStep]",{"range":"399","text":"400"},"Update the dependencies array to be: [myDispatch, currentPointInfo, typeId]",{"range":"401","text":"402"},"Update the dependencies array to be: []",{"range":"403","text":"404"},"Update the dependencies array to be: [dispatch, props, props.needCleanField]",{"range":"405","text":"406"},{"range":"407","text":"398"},"Update the dependencies array to be: [props, value]",{"range":"408","text":"409"},"Update the dependencies array to be: [props]",{"range":"410","text":"411"},[2342,2344],"[dispatch]",[3209,3236],"[pointProgress, pointProgress.currentStep]",[2245,2275],"[myDispatch, currentPointInfo, typeId]",[1121,1137],"[]",[1128,1150],"[dispatch, props, props.needCleanField]",[866,868],[737,739],"[props, value]",[915,958],"[props]"]